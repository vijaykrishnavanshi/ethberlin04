{
  "address": "0x5BD8669A700565a5237671ee33A5Cc4cDaBF01bF",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256[2]",
              "name": "_pA",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[2][2]",
              "name": "_pB",
              "type": "uint256[2][2]"
            },
            {
              "internalType": "uint256[2]",
              "name": "_pC",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[38]",
              "name": "_pubSignals",
              "type": "uint256[38]"
            }
          ],
          "internalType": "struct CommunityPortal.ProofArgs",
          "name": "proof",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addCommunityCollaborator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "communityPortal",
      "outputs": [
        {
          "internalType": "contract FileversePortal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[38]",
          "name": "_pubSignals",
          "type": "uint256[38]"
        }
      ],
      "name": "getSignerFromPublicSignals",
      "outputs": [
        {
          "internalType": "uint256[2]",
          "name": "",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[38]",
          "name": "_pubSignals",
          "type": "uint256[38]"
        }
      ],
      "name": "getValidEventIdFromPublicSignals",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[38]",
          "name": "_pubSignals",
          "type": "uint256[38]"
        }
      ],
      "name": "getWaterMarkFromPublicSignals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isCollaborator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_pA",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "_pB",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_pC",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[38]",
          "name": "_pubSignals",
          "type": "uint256[38]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa931d5fc4e9f86f923476adac8586cf8ba7bcad486f8d662ff41be0c72317cfc",
  "receipt": {
    "to": null,
    "from": "0xc8c8B0d99dd1E70aDa58F9fcb949D17D38E7C760",
    "contractAddress": "0x5BD8669A700565a5237671ee33A5Cc4cDaBF01bF",
    "transactionIndex": 25,
    "gasUsed": "4074472",
    "logsBloom": "0x
    "blockHash": "0x28661d0d44d3cc8945bdf2caa8b14c452653edca173e310f0eef971a78bb85b0",
    "transactionHash": "0xa931d5fc4e9f86f923476adac8586cf8ba7bcad486f8d662ff41be0c72317cfc",
    "logs": [
      {
        "transactionIndex": 25,
        "blockNumber": 5975171,
        "transactionHash": "0xa931d5fc4e9f86f923476adac8586cf8ba7bcad486f8d662ff41be0c72317cfc",
        "address": "0x265F4650F00B9Ff926bC02AcD4eaC85062234a59",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005bd8669a700565a5237671ee33a5cc4cdabf01bf"
        ],
        "data": "0x",
        "logIndex": 40,
        "blockHash": "0x28661d0d44d3cc8945bdf2caa8b14c452653edca173e310f0eef971a78bb85b0"
      },
      {
        "transactionIndex": 25,
        "blockNumber": 5975171,
        "transactionHash": "0xa931d5fc4e9f86f923476adac8586cf8ba7bcad486f8d662ff41be0c72317cfc",
        "address": "0x265F4650F00B9Ff926bC02AcD4eaC85062234a59",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000005bd8669a700565a5237671ee33a5cc4cdabf01bf",
          "0x0000000000000000000000005bd8669a700565a5237671ee33a5cc4cdabf01bf"
        ],
        "data": "0x",
        "logIndex": 41,
        "blockHash": "0x28661d0d44d3cc8945bdf2caa8b14c452653edca173e310f0eef971a78bb85b0"
      },
      {
        "transactionIndex": 25,
        "blockNumber": 5975171,
        "transactionHash": "0xa931d5fc4e9f86f923476adac8586cf8ba7bcad486f8d662ff41be0c72317cfc",
        "address": "0x265F4650F00B9Ff926bC02AcD4eaC85062234a59",
        "topics": [
          "0x402d924b9bd03718220c51647be3ad8f7da00914b8aba403753caa37f4944a02",
          "0x0000000000000000000000005bd8669a700565a5237671ee33a5cc4cdabf01bf"
        ],
        "data": "0x",
        "logIndex": 42,
        "blockHash": "0x28661d0d44d3cc8945bdf2caa8b14c452653edca173e310f0eef971a78bb85b0"
      }
    ],
    "blockNumber": 5975171,
    "cumulativeGasUsed": "16831316",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "ce7fcb6729d46b82affa5b16d910ec52",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"_pA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_pB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_pC\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[38]\",\"name\":\"_pubSignals\",\"type\":\"uint256[38]\"}],\"internalType\":\"struct CommunityPortal.ProofArgs\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addCommunityCollaborator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityPortal\",\"outputs\":[{\"internalType\":\"contract FileversePortal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[38]\",\"name\":\"_pubSignals\",\"type\":\"uint256[38]\"}],\"name\":\"getSignerFromPublicSignals\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[38]\",\"name\":\"_pubSignals\",\"type\":\"uint256[38]\"}],\"name\":\"getValidEventIdFromPublicSignals\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[38]\",\"name\":\"_pubSignals\",\"type\":\"uint256[38]\"}],\"name\":\"getWaterMarkFromPublicSignals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isCollaborator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_pA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_pB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_pC\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[38]\",\"name\":\"_pubSignals\",\"type\":\"uint256[38]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CommunityPortal.sol\":\"CommunityPortal\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0xde231558366826d7cb61725af8147965a61c53b77a352cc8c9af38fc5a92ac3c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/metatx/ERC2771Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5e8c266715f6454b732e6c12a85f75dcf3b1c298a90830bb56bfda29fa5b6264\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/CommunityPortal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./FileversePortal.sol\\\";\\nimport \\\"./structs/PortalKeyVerifiers.sol\\\";\\nimport \\\"./Groth16Verifier.sol\\\";\\n\\ncontract CommunityPortal is Groth16Verifier {\\n    string public constant name = \\\"Community Owned Portal\\\";\\n\\n    // address of community owned portal\\n    FileversePortal public immutable communityPortal;\\n    address public owner;\\n    address public trustedForwarder = 0x31470b3126DD7cee5ee7591C2cb5142A68F57120;\\n\\n    // This us the ETHBerlin event UUID converted to bigint\\n\\tuint256[1] VALID_EVENT_IDS = [\\n\\t\\t111560146890584288369567824893314450802\\n\\t];\\n\\n\\t// This is hex to bigint conversion for ETHBerlin signer\\n\\tuint256[2] ETHBERLIN_SIGNER = [\\n\\t\\t13908133709081944902758389525983124100292637002438232157513257158004852609027,\\n\\t\\t7654374482676219729919246464135900991450848628968334062174564799457623790084\\n\\t];\\n\\n    struct ProofArgs {\\n\\t\\tuint256[2] _pA;\\n\\t\\tuint256[2][2] _pB;\\n\\t\\tuint256[2] _pC;\\n\\t\\tuint256[38] _pubSignals;\\n\\t}\\n\\n    constructor() {\\n        owner = address(this);\\n        PortalKeyVerifiers.KeyVerifier memory verifier = PortalKeyVerifiers.KeyVerifier(0x0, 0x0, 0x0, 0x0);\\n        string memory metadataIPFSHash = \\\"QmNSM3RTrhhtK8UJESTJYBEWygUHV2DPedxDJfHiVphVVB\\\";\\n        string memory emptyString = \\\"dummyvalue\\\";\\n        communityPortal = new FileversePortal(\\n            metadataIPFSHash,\\n            emptyString,\\n            emptyString,\\n            owner,\\n            trustedForwarder,\\n            verifier\\n        );\\n    }\\n\\n    modifier verifiedProof(ProofArgs calldata proof) {\\n\\t\\trequire(\\n\\t\\t\\tthis.verifyProof(\\n\\t\\t\\t\\tproof._pA,\\n\\t\\t\\t\\tproof._pB,\\n\\t\\t\\t\\tproof._pC,\\n\\t\\t\\t\\tproof._pubSignals\\n\\t\\t\\t),\\n\\t\\t\\t\\\"Invalid proof\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n    \\tmodifier validEventIds(uint256[38] memory _pubSignals) {\\n\\t\\tuint256[] memory eventIds = getValidEventIdFromPublicSignals(\\n\\t\\t\\t_pubSignals\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tkeccak256(abi.encodePacked(eventIds)) ==\\n\\t\\t\\t\\tkeccak256(abi.encodePacked(VALID_EVENT_IDS)),\\n\\t\\t\\t\\\"Invalid event ids\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier validSigner(uint256[38] memory _pubSignals) {\\n\\t\\tuint256[2] memory signer = getSignerFromPublicSignals(_pubSignals);\\n\\t\\trequire(\\n\\t\\t\\tsigner[0] == ETHBERLIN_SIGNER[0] && signer[1] == ETHBERLIN_SIGNER[1],\\n\\t\\t\\t\\\"Invalid signer\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier validWaterMark(uint256[38] memory _pubSignals) {\\n\\t\\trequire(\\n\\t\\t\\tgetWaterMarkFromPublicSignals(_pubSignals) ==\\n\\t\\t\\t\\tuint256(uint160(msg.sender)),\\n\\t\\t\\t\\\"Invalid watermark\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n    function addCommunityCollaborator(\\n        ProofArgs calldata proof,\\n        address account\\n    ) \\n        public\\n\\t\\tverifiedProof(proof)\\n\\t\\tvalidEventIds(proof._pubSignals)\\n\\t\\tvalidSigner(proof._pubSignals)\\n    {\\n        communityPortal.addCollaborator(account);\\n    }\\n\\n    function isCollaborator(address account) public view returns (bool) {\\n        return communityPortal.isCollaborator(account);\\n    }\\n\\n\\t// ----------------------------------------------------------\\n\\t// Utility functions for destructuring a proof publicSignals|\\n\\t// ----------------------------------------------------------\\n\\n\\tfunction getWaterMarkFromPublicSignals(\\n\\t\\tuint256[38] memory _pubSignals\\n\\t) public pure returns (uint256) {\\n\\t\\treturn _pubSignals[37];\\n\\t}\\n\\n\\t// Numbers of events is arbitary but for this example we are using 10 (including test eventID)\\n\\tfunction getValidEventIdFromPublicSignals(\\n\\t\\tuint256[38] memory _pubSignals\\n\\t) public view returns (uint256[] memory) {\\n\\t\\t// Events are stored from starting index 15 to till valid event ids length\\n\\t\\tuint256[] memory eventIds = new uint256[](VALID_EVENT_IDS.length);\\n\\t\\tfor (uint256 i = 0; i < VALID_EVENT_IDS.length; i++) {\\n\\t\\t\\teventIds[i] = _pubSignals[15 + i];\\n\\t\\t}\\n\\t\\treturn eventIds;\\n\\t}\\n\\n\\tfunction getSignerFromPublicSignals(\\n\\t\\tuint256[38] memory _pubSignals\\n\\t) public pure returns (uint256[2] memory) {\\n\\t\\tuint256[2] memory signer;\\n\\t\\tsigner[0] = _pubSignals[13];\\n\\t\\tsigner[1] = _pubSignals[14];\\n\\t\\treturn signer;\\n\\t}\\n}\\n\",\"keccak256\":\"0x231779e4c58e0cb0328aa25b58e0ceddcfefe2214bc54c78bfb57e69be87bee4\",\"license\":\"MIT\"},\"contracts/FileversePortal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/metatx/ERC2771Context.sol\\\";\\nimport \\\"./structs/PortalKeyVerifiers.sol\\\";\\n\\n/// @custom:security-contact security@fileverse.io\\ncontract FileversePortal is ERC2771Context, Ownable2Step {\\n    using Counters for Counters.Counter;\\n\\n    // ipfs hash with metadata for portal contract\\n    string public metadataIPFSHash;\\n\\n    // constant for sentinal collaborator\\n    address internal constant SENTINEL_COLLABORATOR = address(0x1);\\n\\n    // mapping with address to collaborator\\n    mapping(address => address) internal collaborators;\\n\\n    // number of collaborator added to the smart contract\\n    uint256 internal collaboratorCount;\\n\\n    // counter instance for fileId\\n    Counters.Counter private _fileIdCounter;\\n\\n    uint256 private _keyVerifierCounter;\\n\\n    // mapping from version to key verifier hashes\\n    mapping(uint256 => PortalKeyVerifiers.KeyVerifier) public keyVerifiers;\\n\\n    struct CollaboratorKey {\\n        string viewDid;\\n        string editDid;\\n    }\\n\\n    // mapping from address to the member data\\n    mapping(address => CollaboratorKey) public collaboratorKeys;\\n    uint256 internal collaboratorKeysCount;\\n\\n    enum FileType {\\n        PUBLIC,\\n        PRIVATE,\\n        GATED,\\n        MEMBER_PRIVATE\\n    }\\n\\n    struct File {\\n        string metadataIPFSHash;\\n        string contentIPFSHash;\\n        string gateIPFSHash;\\n        FileType fileType;\\n        uint256 version;\\n    }\\n\\n    // mapping from fileId to the file metadata\\n    mapping(uint256 => File) public files;\\n\\n    /**\\n     * @notice constructor for the fileverse portal smart contract\\n     * @dev It gets called by the mint function of the registry with proper data\\n     * @param _metadataIPFSHash - The IPFS hash of the metadata file.\\n     * @param _ownerViewDid - The DID of the owner that can be used to view the data\\n     * @param _ownerEditDid - The DID of the owner that can be used to edit the data\\n     * @param owner - address of the owner which is deploying the smart contract\\n     * @param _trustedForwarder - instance of the trusted forwarder\\n     */\\n    constructor(\\n        string memory _metadataIPFSHash,\\n        string memory _ownerViewDid,\\n        string memory _ownerEditDid,\\n        address owner,\\n        address _trustedForwarder,\\n        PortalKeyVerifiers.KeyVerifier memory _keyVerifier\\n    ) ERC2771Context(_trustedForwarder) {\\n        require(owner != address(0), \\\"FV211\\\");\\n        require(_trustedForwarder != address(0), \\\"FV211\\\");\\n\\n        metadataIPFSHash = _metadataIPFSHash;\\n        _transferOwnership(owner);\\n        _setupCollaborator();\\n        _addCollaborator(owner);\\n        _addKey(owner, _ownerViewDid, _ownerEditDid);\\n        bytes32 portalEncryptionKeyVerifier = _keyVerifier\\n            .portalEncryptionKeyVerifier;\\n        bytes32 portalDecryptionKeyVerifier = _keyVerifier\\n            .portalDecryptionKeyVerifier;\\n        bytes32 memberEncryptionKeyVerifier = _keyVerifier\\n            .memberEncryptionKeyVerifier;\\n        bytes32 memberDecryptionKeyVerifier = _keyVerifier\\n            .memberDecryptionKeyVerifier;\\n        _addKeyVerifiers(\\n            portalEncryptionKeyVerifier,\\n            portalDecryptionKeyVerifier,\\n            memberEncryptionKeyVerifier,\\n            memberDecryptionKeyVerifier\\n        );\\n    }\\n\\n    event AddedCollaborator(address indexed account, address indexed by);\\n\\n    /**\\n     * @notice The function adds a collaborator to the list of collaborators\\n     * @dev If the collaborator is not the smart contract address and is not\\n     * sentinel collaborator and the collaborator is not the zero address,\\n     * then add it.\\n     * It also emits an event AddedCollaborator with params account and by addresses\\n     * It can be called only by the owner of the portal\\n     * @param collaborator - The address of the collaborator to be added.\\n     */\\n    function addCollaborator(address collaborator) public onlyOwner {\\n        _addCollaborator(collaborator);\\n        emit AddedCollaborator(collaborator, _msgSender());\\n    }\\n\\n    event RemovedCollaborator(address indexed account, address indexed by);\\n\\n    /**\\n     * `function removeCollaborator(address prevCollaborator, address collaborator) public onlyOwner returns (void)`\\n     * @notice The function removes a collaborator from the list of collaborators\\n     * @dev If the collaborator is not the only collaborator and is not\\n     * sentinel collaborator and the collaborator is not the zero address,\\n     * then remove it.\\n     * It also emits an event RemovedCollaborator with params account and by addresses\\n     * It can be called only by the owner of the portal\\n     * @param prevCollaborator - The address of the previous collaborator.\\n     * @param collaborator - The address of the collaborator to be removed.\\n     */\\n    function removeCollaborator(address prevCollaborator, address collaborator)\\n        public\\n        onlyOwner\\n    {\\n        // Only allow to remove an owner, if greater than one.\\n        if (collaboratorCount - 1 == 0) {\\n            require(false, \\\"FV205\\\");\\n        }\\n        // Validate owner address and check that it corresponds to owner index.\\n        require(\\n            collaborator != address(0) &&\\n                collaborator != SENTINEL_COLLABORATOR &&\\n                collaborator != address(this),\\n            \\\"FV203\\\"\\n        );\\n        require(collaborators[prevCollaborator] == collaborator, \\\"FV204\\\");\\n        CollaboratorKey memory collaboratorKey = collaboratorKeys[collaborator];\\n        collaborators[prevCollaborator] = collaborators[collaborator];\\n        collaborators[collaborator] = address(0);\\n        collaboratorCount--;\\n        if (\\n            bytes(collaboratorKey.viewDid).length > 0 || bytes(collaboratorKey.editDid).length > 0\\n        ) {\\n            _removeKey(collaborator);\\n        }\\n        emit RemovedCollaborator(collaborator, _msgSender());\\n    }\\n\\n    /**\\n     * @notice This is a public function to check if an account is a\\n     * collaborator or not\\n     * @dev If the collaborator is not the sentinel collaborator and\\n     * the next collaborator is not the zero address, then return true.\\n     * @param account - The address of the account\\n     * @return bool - if the address is in collaborator list return true else false.\\n     */\\n    function isCollaborator(address account) public view returns (bool) {\\n        return\\n            account != SENTINEL_COLLABORATOR &&\\n            collaborators[account] != address(0);\\n    }\\n\\n    /**\\n     * `_checkRole(address account)`\\n     * @notice Its a function that checks if the address `account` is a\\n     * collaborator. If it is not, it reverts the transaction.\\n     * @dev This function is used by onlyCollaborator modifier\\n     * @param account - The address of the account to check if the ther are a\\n     * collaborator\\n     */\\n    function _checkRole(address account) internal view virtual {\\n        if (!isCollaborator(account)) {\\n            revert(\\\"Role Missing\\\");\\n        }\\n    }\\n\\n    /**\\n     * `modifier onlyCollaborator()`\\n     * @notice This is a modifier that is used to check if the sender is a collaborator.\\n     * @dev this modifier is used across the contract. If the sender is not a\\n     * collaborator, the transaction is reverted.\\n     */\\n    modifier onlyCollaborator() {\\n        _checkRole(_msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * `function getCollaborators() public view returns (address[] memory)`\\n     * @notice This function is returns the list of collaborator of the portal.\\n     * @dev This is read only function which returns a list of addresses\\n     * @return collaboratorList - List of addresses that are added as collaborator\\n     * to the portal contract\\n     */\\n    function getCollaborators() public view returns (address[] memory) {\\n        address[] memory array = new address[](collaboratorCount);\\n\\n        // populate return array\\n        uint256 index;\\n        address currentCollaborator = collaborators[SENTINEL_COLLABORATOR];\\n        while (currentCollaborator != SENTINEL_COLLABORATOR) {\\n            array[index] = currentCollaborator;\\n            currentCollaborator = collaborators[currentCollaborator];\\n            index++;\\n        }\\n        return array;\\n    }\\n\\n    /**\\n     * `function getCollaboratorCount() public view returns (uint256)`\\n     * @notice This function returns the number of collaborators in the contract\\n     * @return collaboratorCount The number of collaborators that are added to the\\n     * portal contract\\n     */\\n    function getCollaboratorCount() public view returns (uint256) {\\n        return collaboratorCount;\\n    }\\n\\n    event UpdatedPortalMetadata(string metadataIPFSHash, address indexed by);\\n\\n    /**\\n     * @notice Update the metadata hash of the smart contract. This is what is we\\n     * use to show name and description of the portal. It requires that the input\\n     * string is not empty and then sets the `metadataIPFSHash` variable to the\\n     * input string.\\n     * This function can only be called by owner\\n     * @dev It also emits an event called `UpdatedPortalMetadata` with the\\n     * `metadataIPFSHash` and the `msg.sender` as parameters\\n     * @param _metadataIPFSHash - The IPFS hash of the portal metadata file.\\n     */\\n    function updateMetadata(string memory _metadataIPFSHash) public onlyOwner {\\n        require(bytes(_metadataIPFSHash).length != 0, \\\"FV206\\\");\\n        metadataIPFSHash = _metadataIPFSHash;\\n        emit UpdatedPortalMetadata(metadataIPFSHash, _msgSender());\\n    }\\n\\n    event AddedFile(\\n        uint256 indexed fileId,\\n        string metadataIPFSHash,\\n        string contentIPFSHash,\\n        string gateIPFSHash,\\n        address indexed by\\n    );\\n\\n    /**\\n     * @notice Add a file to the smart contract. It requires _metadataIPFSHash and\\n     * _contentIPFSHash is not empty.\\n     * This function can only be called by a collaborator\\n     * @dev An event `event AddedFile` is also emitted at the end. All the data that is\\n     * passed as parameters is saved in files mapping.\\n     * @param _metadataIPFSHash - The IPFS hash of the metadata file.\\n     * @param _contentIPFSHash - The IPFS hash of the file's content.\\n     * @param _gateIPFSHash - The IPFS hash of the gate file.\\n     * @param filetype - This is an enum that can be one of the following: Public / Private / Gated\\n     * @param version - a uint256 which tells which version of the key was used to handle the file\\n     */\\n    function addFile(\\n        string calldata _metadataIPFSHash,\\n        string calldata _contentIPFSHash,\\n        string calldata _gateIPFSHash,\\n        FileType filetype,\\n        uint256 version\\n    ) public onlyCollaborator {\\n        require(bytes(_metadataIPFSHash).length != 0, \\\"FV206\\\");\\n        require(bytes(_contentIPFSHash).length != 0, \\\"FV206\\\");\\n        _versionOfKeyVerifierCheck(version);\\n\\n        if (filetype == FileType.GATED) {\\n            require(bytes(_gateIPFSHash).length != 0, \\\"FV213\\\");\\n        } else {\\n            require(bytes(_gateIPFSHash).length == 0, \\\"FV214\\\");\\n        }\\n\\n        uint256 fileId = _fileIdCounter.current();\\n        _fileIdCounter.increment();\\n        files[fileId] = File(\\n            _metadataIPFSHash,\\n            _contentIPFSHash,\\n            _gateIPFSHash,\\n            filetype,\\n            version\\n        );\\n        emit AddedFile(\\n            fileId,\\n            _metadataIPFSHash,\\n            _contentIPFSHash,\\n            _gateIPFSHash,\\n            _msgSender()\\n        );\\n    }\\n\\n    event EditedFile(\\n        uint256 indexed fileId,\\n        string metadataIPFSHash,\\n        string contentIPFSHash,\\n        string gateIPFSHash,\\n        address indexed by\\n    );\\n\\n    /**\\n     * @notice Edit a file in the smart contract.\\n     * This function can only be called by a collaborator\\n     * @dev An event `event EditedFile` is also emitted at the end. All the data that is passed as parameters\\n     * replaces the data in files mapping.\\n     * @param fileId - fileId of the file being edited. Its of the type uint256.\\n     * @param _metadataIPFSHash - The IPFS hash of the metadata file.\\n     * @param _contentIPFSHash - The IPFS hash of the file's content.\\n     * @param _gateIPFSHash - The IPFS hash of the gate file.\\n     * @param filetype - This is an enum that can be one of the following: Public / Private / Gated\\n     * @param version - a uint256 which tells which version of the key was used to handle the file\\n     */\\n    function editFile(\\n        uint256 fileId,\\n        string calldata _metadataIPFSHash,\\n        string calldata _contentIPFSHash,\\n        string calldata _gateIPFSHash,\\n        FileType filetype,\\n        uint256 version\\n    ) public onlyCollaborator {\\n        require(bytes(_metadataIPFSHash).length != 0, \\\"FV206\\\");\\n        require(bytes(_contentIPFSHash).length != 0, \\\"FV206\\\");\\n\\n        _versionOfKeyVerifierCheck(version);\\n\\n        if (filetype == FileType.GATED) {\\n            require(bytes(_gateIPFSHash).length != 0, \\\"FV213\\\");\\n        } else {\\n            require(bytes(_gateIPFSHash).length == 0, \\\"FV214\\\");\\n        }\\n\\n        if (fileId >= _fileIdCounter.current()) {\\n            require(false, \\\"FV207\\\");\\n        }\\n\\n        files[fileId] = File(\\n            _metadataIPFSHash,\\n            _contentIPFSHash,\\n            _gateIPFSHash,\\n            filetype,\\n            version\\n        );\\n        emit EditedFile(\\n            fileId,\\n            _metadataIPFSHash,\\n            _contentIPFSHash,\\n            _gateIPFSHash,\\n            _msgSender()\\n        );\\n    }\\n\\n    /**\\n     * `function getFileCount() public view returns (uint256)`\\n     * @notice This is a public getter function which returns the current file count\\n     * @dev It relies on the _fileIdCounter an instance of Counters.Counter and\\n     * doesn't change the state of the contract\\n     * @return fileCount The current number of files in the smart contract.\\n     */\\n    function getFileCount() public view returns (uint256) {\\n        return _fileIdCounter.current();\\n    }\\n\\n    event RegisteredCollaboratorKeys(address indexed account);\\n\\n    /**\\n     * @notice This function allows a collaborator to register their DIDs with the contract.\\n     * This function can only be called by a collaborator\\n     * @dev An event `event RegisteredCollaboratorKeys(address indexed account)` is also emitted at the end\\n     * @param viewDid - The DID of the collaborator that can be used to view the data\\n     * @param editDid - The DID of the collaborator that can be used to edit the data\\n     */\\n    function registerCollaboratorKeys(\\n        string calldata viewDid,\\n        string calldata editDid\\n    ) public onlyCollaborator {\\n        address sender = _msgSender();\\n        _addKey(sender, viewDid, editDid);\\n    }\\n\\n    event RemovedCollaboratorKeys(address indexed account);\\n\\n    /**\\n     * `function removeSelfKeys() public onlyCollaborator returns (void)`\\n     * @notice This function removes the sender from the collaboratorKeys mapping.\\n     * This function can only be called by a collaborator\\n     * @dev It also removes the view and edit DIDs from the collaboratorKeys mapping\\n     * An event `event RemovedCollaboratorKeys(address indexed account)` is also emitted at the end\\n     */\\n    function removeCollaboratorKeys() public onlyCollaborator {\\n        address sender = _msgSender();\\n        _removeKey(sender);\\n    }\\n\\n    function renounceOwnership() public override onlyOwner {}\\n\\n    /**\\n     * `function getcollaboratorKeysCount() public view returns (uint256)`\\n     * @notice This is public function to get all the onborded collaborators of the portal\\n     * @return collaboratorKeysCount The number of collaboratorKeys in the club.\\n     */\\n    function getCollaboratorKeysCount() public view returns (uint256) {\\n        return collaboratorKeysCount;\\n    }\\n\\n    event UpdatedKeyVerifiers(\\n        bytes32 portalEncryptionKeyVerifier,\\n        bytes32 portalDecryptionKeyVerifier,\\n        bytes32 memberEncryptionKeyVerifier,\\n        bytes32 memberDecryptionKeyVerifier\\n    );\\n\\n    /**\\n     * @notice This is public function to update the keyVerifiers of the contract which\\n     * This function can only be called by an owner\\n     * @param portalEncryptionKeyVerifier - sha256 hash of Portal Encryption Key\\n     * @param portalDecryptionKeyVerifier - sha256 hash of Portal Decryption Key\\n     * @param memberEncryptionKeyVerifier - sha256 hash of Member Encryption Key\\n     * @param memberDecryptionKeyVerifier - sha256 hash of Member Decryption Key\\n     */\\n    function updateKeyVerifiers(\\n        bytes32 portalEncryptionKeyVerifier,\\n        bytes32 portalDecryptionKeyVerifier,\\n        bytes32 memberEncryptionKeyVerifier,\\n        bytes32 memberDecryptionKeyVerifier\\n    ) public onlyOwner {\\n        _addKeyVerifiers(\\n            portalEncryptionKeyVerifier,\\n            portalDecryptionKeyVerifier,\\n            memberEncryptionKeyVerifier,\\n            memberDecryptionKeyVerifier\\n        );\\n        emit UpdatedKeyVerifiers(\\n            portalEncryptionKeyVerifier,\\n            portalDecryptionKeyVerifier,\\n            memberEncryptionKeyVerifier,\\n            memberDecryptionKeyVerifier\\n        );\\n    }\\n\\n    function _addKeyVerifiers(\\n        bytes32 portalEncryptionKeyVerifier,\\n        bytes32 portalDecryptionKeyVerifier,\\n        bytes32 memberEncryptionKeyVerifier,\\n        bytes32 memberDecryptionKeyVerifier\\n    ) internal {\\n        require(portalEncryptionKeyVerifier.length != 0, \\\"FV206\\\");\\n        require(portalDecryptionKeyVerifier.length != 0, \\\"FV206\\\");\\n        require(memberEncryptionKeyVerifier.length != 0, \\\"FV206\\\");\\n        require(memberDecryptionKeyVerifier.length != 0, \\\"FV206\\\");\\n        uint256 verifierId = _keyVerifierCounter;\\n        keyVerifiers[verifierId] = PortalKeyVerifiers.KeyVerifier(\\n            portalEncryptionKeyVerifier,\\n            portalDecryptionKeyVerifier,\\n            memberEncryptionKeyVerifier,\\n            memberDecryptionKeyVerifier\\n        );\\n        ++_keyVerifierCounter;\\n    }\\n\\n    /**\\n     * `function _msgSender() internal view override(Context, ERC2771Context) returns (address sender)`\\n     *\\n     * @notice The function is named `_msgSender` and it is `internal` and `view` (i.e. it does not modify the\\n     * state of the contract and it does not cost gas). It `overrides` the `_msgSender` function in the\\n     * `Context` contract. It returns the address of the sender of the message\\n     * @dev This function is required to make the contract gasless and is inherited from ERC2771Context\\n     * @return sender the address of the message sender\\n     */\\n    function _msgSender()\\n        internal\\n        view\\n        override(Context, ERC2771Context)\\n        returns (address sender)\\n    {\\n        return ERC2771Context._msgSender();\\n    }\\n\\n    /**\\n     * `function _msgData() internal view override(Context, ERC2771Context) returns (bytes calldata)`\\n     *\\n     * @notice The function is named `_msgData` and it is `internal` and `view` (i.e. it does not modify the\\n     * state of the contract and it does not cost gas). It `overrides` the `_msgData` function in the\\n     * `Context` contract. It returns a `bytes calldata` value\\n     * @dev This function is required to make the contract gasless and is inherited from ERC2771Context\\n     * @return The calldata of the message.\\n     */\\n    function _msgData()\\n        internal\\n        view\\n        override(Context, ERC2771Context)\\n        returns (bytes calldata)\\n    {\\n        return ERC2771Context._msgData();\\n    }\\n\\n    /**\\n     * @notice Sets up the circular linked list for collaborators mapping.\\n     * @dev Initial setup step required for kickstarting the collaborator mapping\\n     */\\n    function _setupCollaborator() internal {\\n        collaborators[SENTINEL_COLLABORATOR] = SENTINEL_COLLABORATOR;\\n    }\\n\\n    /**\\n     * @notice Adds a new collaborator to the collaborators mapping.\\n     *\\n     * This function adds a new collaborator address to the collaborators mapping and increments the collaboratorCount.\\n     * It checks to ensure that the address is not equal to 0, the SENTINEL_COLLABORATOR, or itself. It also checks to\\n     * ensure that the collaborator is not a duplicate.\\n     *\\n     * @param collaborator The address of the collaborator to add.\\n     *\\n     */\\n    function _addCollaborator(address collaborator) internal {\\n        require(\\n            collaborator != address(0) &&\\n                collaborator != SENTINEL_COLLABORATOR &&\\n                collaborator != address(this),\\n            \\\"FV203\\\"\\n        );\\n        // No duplicate owners allowed.\\n        require(collaborators[collaborator] == address(0), \\\"FV204\\\");\\n        collaborators[collaborator] = collaborators[SENTINEL_COLLABORATOR];\\n        collaborators[SENTINEL_COLLABORATOR] = collaborator;\\n        ++collaboratorCount;\\n    }\\n\\n    /**\\n     * @notice Removes a key from the collaboratorKeys mapping.\\n     *\\n     * This function removes an address from the collaboratorKeys mapping and decrements the collaboratorKeysCount. It also emits the\\n     * RemovedCollaboratorKeys event. It checks to ensure that the viewDid and editDid strings have a non-zero length.\\n     *\\n     * @param account The address of the collaborator\\n     */\\n    function _removeKey(address account) internal {\\n        CollaboratorKey memory collaboratorKey = collaboratorKeys[account];\\n        require(bytes(collaboratorKey.viewDid).length > 0, \\\"FV209\\\");\\n        require(bytes(collaboratorKey.editDid).length > 0, \\\"FV209\\\");\\n        delete collaboratorKeys[account];\\n        --collaboratorKeysCount;\\n        emit RemovedCollaboratorKeys(account);\\n    }\\n\\n    /**\\n     * @notice Adds a new collaborator's keys to the collaboratorKeys mapping.\\n     *\\n     * This function adds a new member to the collaboratorKeys mapping, increments the collaboratorKeysCount and emits the RegisteredCollaboratorKeys\\n     * event. It checks to ensure that the viewDid and editDid strings have a non-zero length.\\n     *\\n     * @param account The address of the member to add.\\n     * @param viewDid - The DID of the collaborator that can be used to view the data\\n     * @param editDid - The DID of the collaborator that can be used to edit the data\\n     *\\n     */\\n    function _addKey(\\n        address account,\\n        string memory viewDid,\\n        string memory editDid\\n    ) internal {\\n        require(bytes(viewDid).length != 0, \\\"FV201\\\");\\n        require(bytes(editDid).length != 0, \\\"FV201\\\");\\n        CollaboratorKey memory collaboratorKey = collaboratorKeys[account];\\n        require(bytes(collaboratorKey.viewDid).length == 0, \\\"FV209\\\");\\n        require(bytes(collaboratorKey.editDid).length == 0, \\\"FV209\\\");\\n\\n        collaboratorKeys[account] = CollaboratorKey(viewDid, editDid);\\n        collaboratorKeysCount += 1;\\n        emit RegisteredCollaboratorKeys(account);\\n    }\\n\\n    /**\\n     * `_versionOfKeyVerifierCheck(uint256 _version)` checks if the `_version` is greater than\\n     * `_keyVerifierCounter` and if it is, it throws an error\\n     * @param _version - The version of the key verifier that you want to check.\\n     */\\n    function _versionOfKeyVerifierCheck(uint256 _version) internal view {\\n        if (_version >= _keyVerifierCounter) {\\n            require(false, \\\"FV208\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x976e3185517a88de38696678856682cfdeb323a178a029e80ccbcb114381fa53\",\"license\":\"MIT\"},\"contracts/Groth16Verifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract Groth16Verifier {\\n\\t// Scalar field size\\n\\tuint256 constant r =\\n\\t\\t21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\t// Base field size\\n\\tuint256 constant q =\\n\\t\\t21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n\\t// Verification Key data\\n\\tuint256 constant alphax =\\n\\t\\t20491192805390485299153009773594534940189261866228447918068658471970481763042;\\n\\tuint256 constant alphay =\\n\\t\\t9383485363053290200918347156157836566562967994039712273449902621266178545958;\\n\\tuint256 constant betax1 =\\n\\t\\t4252822878758300859123897981450591353533073413197771768651442665752259397132;\\n\\tuint256 constant betax2 =\\n\\t\\t6375614351688725206403948262868962793625744043794305715222011528459656738731;\\n\\tuint256 constant betay1 =\\n\\t\\t21847035105528745403288232691147584728191162732299865338377159692350059136679;\\n\\tuint256 constant betay2 =\\n\\t\\t10505242626370262277552901082094356697409835680220590971873171140371331206856;\\n\\tuint256 constant gammax1 =\\n\\t\\t11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n\\tuint256 constant gammax2 =\\n\\t\\t10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n\\tuint256 constant gammay1 =\\n\\t\\t4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n\\tuint256 constant gammay2 =\\n\\t\\t8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n\\tuint256 constant deltax1 =\\n\\t\\t4794378188555673810018158797263945613117081424700154854974240721894252090534;\\n\\tuint256 constant deltax2 =\\n\\t\\t1816911282723953521360374096804693609948256596921895265929104078200823204675;\\n\\tuint256 constant deltay1 =\\n\\t\\t4822598240965235353021859310978490456254180072341966996061361969858340984511;\\n\\tuint256 constant deltay2 =\\n\\t\\t13543378357184474310383646423534605062703850124878450029441667582061275654866;\\n\\n\\tuint256 constant IC0x =\\n\\t\\t7039163794843290796256368468693852992261864980639380847782867461741038210431;\\n\\tuint256 constant IC0y =\\n\\t\\t13828571545952070419695572439672637697093967550127663217094587479939756801713;\\n\\n\\tuint256 constant IC1x =\\n\\t\\t3958090907019850444580447271310783643067855398231992297257715727710216995446;\\n\\tuint256 constant IC1y =\\n\\t\\t20221946439601599894288820734713434259239717191029254240067234373135565758177;\\n\\n\\tuint256 constant IC2x =\\n\\t\\t900186639711238933493055667378009920193627212372904879368486442415809327595;\\n\\tuint256 constant IC2y =\\n\\t\\t2326167641766524616999631967433198170614424673993051767085816973791951172320;\\n\\n\\tuint256 constant IC3x =\\n\\t\\t5036413725381298640320115097177392324444247429122196014822193539177279161834;\\n\\tuint256 constant IC3y =\\n\\t\\t16915948281029825623174724126850423768748230097781953657414920017958567938481;\\n\\n\\tuint256 constant IC4x =\\n\\t\\t18760100143371695362362583151699410223835931838504964976371030235483771799520;\\n\\tuint256 constant IC4y =\\n\\t\\t11050897648840559830340797268632494985552806330900971650426635140540632129623;\\n\\n\\tuint256 constant IC5x =\\n\\t\\t14405103043934777929451041926853384737748587264397789238453021115804714011027;\\n\\tuint256 constant IC5y =\\n\\t\\t17654525523246776275961068512159018488399387144246684730694339431289852689612;\\n\\n\\tuint256 constant IC6x =\\n\\t\\t8723869934697142623491762263289398094319535893464503540125898389370968107859;\\n\\tuint256 constant IC6y =\\n\\t\\t6562444046746975238614247431088671155226534237756214900132774223548393484900;\\n\\n\\tuint256 constant IC7x =\\n\\t\\t14577478605943949020672432197678273024089978103276775373202577864795436168402;\\n\\tuint256 constant IC7y =\\n\\t\\t20868380911669423225158693169242758989558229682271980505657366061586596203338;\\n\\n\\tuint256 constant IC8x =\\n\\t\\t15078791307200682406383940510187595016164044832563024269891293768166347461344;\\n\\tuint256 constant IC8y =\\n\\t\\t13807879254500296471557402479543820453954075404741718297177665886866496451391;\\n\\n\\tuint256 constant IC9x =\\n\\t\\t11961110457054262187040141268827975035460766426109310097612340764580611314242;\\n\\tuint256 constant IC9y =\\n\\t\\t648031620139716874034542002574123681367629070550974595278392168004036814626;\\n\\n\\tuint256 constant IC10x =\\n\\t\\t9897786420777014154834245148124872045575237833648028105961996898423566286793;\\n\\tuint256 constant IC10y =\\n\\t\\t10942250463782575990311669310939232003635777350050348004971415243722694683862;\\n\\n\\tuint256 constant IC11x =\\n\\t\\t21768976691153943693253939674737520933075287952326155542834234684045105263955;\\n\\tuint256 constant IC11y =\\n\\t\\t2652628038258207868440308689934020510765602358527332281459263595352308874872;\\n\\n\\tuint256 constant IC12x =\\n\\t\\t10579889892022441902715761343940775692321155123038188581132868576263856691960;\\n\\tuint256 constant IC12y =\\n\\t\\t14197080288473739214766468387110821163678798975745451452929084680507366969089;\\n\\n\\tuint256 constant IC13x =\\n\\t\\t17381487274016777148244396779385401991045642828052327241661444508026488993960;\\n\\tuint256 constant IC13y =\\n\\t\\t12631141756649305162072161190046426727112068887466313087474366448379889938290;\\n\\n\\tuint256 constant IC14x =\\n\\t\\t13935047382751423896533075574654791455853724928466459591893970338304052339429;\\n\\tuint256 constant IC14y =\\n\\t\\t6824865220976543574218366346391934951925243253294023634161017592510424936549;\\n\\n\\tuint256 constant IC15x =\\n\\t\\t7031992312358334117229960826366500136698824958913380375057168422867887208482;\\n\\tuint256 constant IC15y =\\n\\t\\t6487726177217344454795293919275011847002886774229625835362883818222058658917;\\n\\n\\tuint256 constant IC16x =\\n\\t\\t32761952607172566377921792852655350243312728025797797731884919650955995978;\\n\\tuint256 constant IC16y =\\n\\t\\t17109740037766941001038815791052639848028856032033398873318266457482577886649;\\n\\n\\tuint256 constant IC17x =\\n\\t\\t5148130823680965556573321200326358804854949261914205931196224467597274599399;\\n\\tuint256 constant IC17y =\\n\\t\\t17786165933748885174698871854113633988020047930367652317579732342918892135076;\\n\\n\\tuint256 constant IC18x =\\n\\t\\t19132395236354116173686960242674593409872273373618210170105548787911478039676;\\n\\tuint256 constant IC18y =\\n\\t\\t13128673728382375315191668017332103847318829241457370626993176402741448018866;\\n\\n\\tuint256 constant IC19x =\\n\\t\\t14279232715058070388045405059532116192488308995813346048366203712476135182708;\\n\\tuint256 constant IC19y =\\n\\t\\t15194615736824271563039224473810596003691641177247333143890653748759024086797;\\n\\n\\tuint256 constant IC20x =\\n\\t\\t9955090722504979957069720304999125823978111318362496584519854575527608185162;\\n\\tuint256 constant IC20y =\\n\\t\\t5794103785028496675031047406750626512072617762810766655823567669958439141907;\\n\\n\\tuint256 constant IC21x =\\n\\t\\t3093386023754979021969916793626732114241059635051234406414231194529079272032;\\n\\tuint256 constant IC21y =\\n\\t\\t2726333648975816401517500089384058227785233536677037001841489035806732587931;\\n\\n\\tuint256 constant IC22x =\\n\\t\\t5277410462435782523915882980275775886349488617157850699431034750288036800613;\\n\\tuint256 constant IC22y =\\n\\t\\t21607346138964363953763925149731352915511002970774217667749452112345555034956;\\n\\n\\tuint256 constant IC23x =\\n\\t\\t2882073216919257197946498011741429525374768355767062401579097340303609014667;\\n\\tuint256 constant IC23y =\\n\\t\\t13336208254651518889575781043861573326120722149864211966571295065261003981732;\\n\\n\\tuint256 constant IC24x =\\n\\t\\t16518085772523452403713249212239346119989769943791821955471370367814804849274;\\n\\tuint256 constant IC24y =\\n\\t\\t3163851008551205343892721959924291514513839424028748364301581737083684712635;\\n\\n\\tuint256 constant IC25x =\\n\\t\\t21443140829801323335830440272589422531303604169183393653690045415169893110317;\\n\\tuint256 constant IC25y =\\n\\t\\t11843677807581613645245376500039550313868511109982120780557566436801551936632;\\n\\n\\tuint256 constant IC26x =\\n\\t\\t9011343512724109228637988929452301928814416148302399365691495043540007452711;\\n\\tuint256 constant IC26y =\\n\\t\\t19203719374228430540624285138844258546893532214993666117722702463877026204624;\\n\\n\\tuint256 constant IC27x =\\n\\t\\t12282563786492051221220863019504107834872987144162405093912833624832473504126;\\n\\tuint256 constant IC27y =\\n\\t\\t2098404497662286606968957419285970045028044455644658720985187205946176225636;\\n\\n\\tuint256 constant IC28x =\\n\\t\\t1990701565738088758270472967471263340707808628204302356692995713089340295959;\\n\\tuint256 constant IC28y =\\n\\t\\t4710902959112092813812405997875645709469153185247079786406984810436621334836;\\n\\n\\tuint256 constant IC29x =\\n\\t\\t20358882933388981503171778761697392336011378779059025555927722043477769063258;\\n\\tuint256 constant IC29y =\\n\\t\\t19015855458316650610909766042056506990773552974154423789621320056338171324109;\\n\\n\\tuint256 constant IC30x =\\n\\t\\t20882010929117143317945388885678484675687595287997043750607534940060968021588;\\n\\tuint256 constant IC30y =\\n\\t\\t11586557172082174037613559244105184201710114582175280732260566723406709924275;\\n\\n\\tuint256 constant IC31x =\\n\\t\\t9866308320093007323457785354472236077116309736444536950583247217505300484593;\\n\\tuint256 constant IC31y =\\n\\t\\t7621726862256096662846253511430079218096624239819015602672239587875065773680;\\n\\n\\tuint256 constant IC32x =\\n\\t\\t14027123489779385457612700332560563436358522575256251872455086560940806515518;\\n\\tuint256 constant IC32y =\\n\\t\\t10938955322537907189548948078384029109133599816409669950598646265343304376683;\\n\\n\\tuint256 constant IC33x =\\n\\t\\t8185779524540657541561125117577265603809435796152263318353366879537563587361;\\n\\tuint256 constant IC33y =\\n\\t\\t7022890698869206227386505409956869964786133909878013184769185704625348906859;\\n\\n\\tuint256 constant IC34x =\\n\\t\\t11611413113751908909193648245064739218553980961929170910199270975967104957038;\\n\\tuint256 constant IC34y =\\n\\t\\t18994807587760619856245913328685591005051029724453337667407306111138944756694;\\n\\n\\tuint256 constant IC35x =\\n\\t\\t200383746952988761639379177517104787510472386926528110614397950418667358661;\\n\\tuint256 constant IC35y =\\n\\t\\t20007848431425763869830663340890269703980870987344402378604194352912831137056;\\n\\n\\tuint256 constant IC36x =\\n\\t\\t328413860030399674842447170312944751562586291423774720425356928068580343472;\\n\\tuint256 constant IC36y =\\n\\t\\t5189648959630633293821012021210812639351882790811543893302480708749969871675;\\n\\n\\tuint256 constant IC37x =\\n\\t\\t6012328917803371026931141367320642434394368982571440096775691385288621172219;\\n\\tuint256 constant IC37y =\\n\\t\\t3144007704082241276171331516247837779546266689067323035946808770824524079278;\\n\\n\\tuint256 constant IC38x =\\n\\t\\t6432946433062452526687536616554972830856614963273241146116338471741671687252;\\n\\tuint256 constant IC38y =\\n\\t\\t15585047391247849588392219751347369098681511169371119693472990059654876497118;\\n\\n\\t// Memory data\\n\\tuint16 constant pVk = 0;\\n\\tuint16 constant pPairing = 128;\\n\\n\\tuint16 constant pLastMem = 896;\\n\\n\\tfunction verifyProof(\\n\\t\\tuint[2] calldata _pA,\\n\\t\\tuint[2][2] calldata _pB,\\n\\t\\tuint[2] calldata _pC,\\n\\t\\tuint[38] calldata _pubSignals\\n\\t) public view returns (bool) {\\n\\t\\tassembly {\\n\\t\\t\\tfunction checkField(v) {\\n\\t\\t\\t\\tif iszero(lt(v, q)) {\\n\\t\\t\\t\\t\\tmstore(0, 0)\\n\\t\\t\\t\\t\\treturn(0, 0x20)\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// G1 function to multiply a G1 value(x,y) to value in an address\\n\\t\\t\\tfunction g1_mulAccC(pR, x, y, s) {\\n\\t\\t\\t\\tlet success\\n\\t\\t\\t\\tlet mIn := mload(0x40)\\n\\t\\t\\t\\tmstore(mIn, x)\\n\\t\\t\\t\\tmstore(add(mIn, 32), y)\\n\\t\\t\\t\\tmstore(add(mIn, 64), s)\\n\\n\\t\\t\\t\\tsuccess := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n\\t\\t\\t\\tif iszero(success) {\\n\\t\\t\\t\\t\\tmstore(0, 0)\\n\\t\\t\\t\\t\\treturn(0, 0x20)\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tmstore(add(mIn, 64), mload(pR))\\n\\t\\t\\t\\tmstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n\\t\\t\\t\\tsuccess := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n\\t\\t\\t\\tif iszero(success) {\\n\\t\\t\\t\\t\\tmstore(0, 0)\\n\\t\\t\\t\\t\\treturn(0, 0x20)\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tfunction checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n\\t\\t\\t\\tlet _pPairing := add(pMem, pPairing)\\n\\t\\t\\t\\tlet _pVk := add(pMem, pVk)\\n\\n\\t\\t\\t\\tmstore(_pVk, IC0x)\\n\\t\\t\\t\\tmstore(add(_pVk, 32), IC0y)\\n\\n\\t\\t\\t\\t// Compute the linear combination vk_x\\n\\n\\t\\t\\t\\tg1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n\\n\\t\\t\\t\\tg1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\\n\\n\\t\\t\\t\\tg1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\\n\\n\\t\\t\\t\\tg1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))\\n\\n\\t\\t\\t\\tg1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))\\n\\n\\t\\t\\t\\tg1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))\\n\\n\\t\\t\\t\\tg1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))\\n\\n\\t\\t\\t\\tg1_mulAccC(_pVk, IC8x, IC8y, calldataload(add(pubSignals, 224)))\\n\\n\\t\\t\\t\\tg1_mulAccC(_pVk, IC9x, IC9y, calldataload(add(pubSignals, 256)))\\n\\n\\t\\t\\t\\tg1_mulAccC(\\n\\t\\t\\t\\t\\t_pVk,\\n\\t\\t\\t\\t\\tIC10x,\\n\\t\\t\\t\\t\\tIC10y,\\n\\t\\t\\t\\t\\tcalldataload(add(pubSignals, 288))\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tg1_mulAccC(\\n\\t\\t\\t\\t\\t_pVk,\\n\\t\\t\\t\\t\\tIC11x,\\n\\t\\t\\t\\t\\tIC11y,\\n\\t\\t\\t\\t\\tcalldataload(add(pubSignals, 320))\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tg1_mulAccC(\\n\\t\\t\\t\\t\\t_pVk,\\n\\t\\t\\t\\t\\tIC12x,\\n\\t\\t\\t\\t\\tIC12y,\\n\\t\\t\\t\\t\\tcalldataload(add(pubSignals, 352))\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tg1_mulAccC(\\n\\t\\t\\t\\t\\t_pVk,\\n\\t\\t\\t\\t\\tIC13x,\\n\\t\\t\\t\\t\\tIC13y,\\n\\t\\t\\t\\t\\tcalldataload(add(pubSignals, 384))\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tg1_mulAccC(\\n\\t\\t\\t\\t\\t_pVk,\\n\\t\\t\\t\\t\\tIC14x,\\n\\t\\t\\t\\t\\tIC14y,\\n\\t\\t\\t\\t\\tcalldataload(add(pubSignals, 416))\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tg1_mulAccC(\\n\\t\\t\\t\\t\\t_pVk,\\n\\t\\t\\t\\t\\tIC15x,\\n\\t\\t\\t\\t\\tIC15y,\\n\\t\\t\\t\\t\\tcalldataload(add(pubSignals, 448))\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tg1_mulAccC(\\n\\t\\t\\t\\t\\t_pVk,\\n\\t\\t\\t\\t\\tIC16x,\\n\\t\\t\\t\\t\\tIC16y,\\n\\t\\t\\t\\t\\tcalldataload(add(pubSignals, 480))\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tg1_mulAccC(\\n\\t\\t\\t\\t\\t_pVk,\\n\\t\\t\\t\\t\\tIC17x,\\n\\t\\t\\t\\t\\tIC17y,\\n\\t\\t\\t\\t\\tcalldataload(add(pubSignals, 512))\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tg1_mulAccC(\\n\\t\\t\\t\\t\\t_pVk,\\n\\t\\t\\t\\t\\tIC18x,\\n\\t\\t\\t\\t\\tIC18y,\\n\\t\\t\\t\\t\\tcalldataload(add(pubSignals, 544))\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tg1_mulAccC(\\n\\t\\t\\t\\t\\t_pVk,\\n\\t\\t\\t\\t\\tIC19x,\\n\\t\\t\\t\\t\\tIC19y,\\n\\t\\t\\t\\t\\tcalldataload(add(pubSignals, 576))\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tg1_mulAccC(\\n\\t\\t\\t\\t\\t_pVk,\\n\\t\\t\\t\\t\\tIC20x,\\n\\t\\t\\t\\t\\tIC20y,\\n\\t\\t\\t\\t\\tcalldataload(add(pubSignals, 608))\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tg1_mulAccC(\\n\\t\\t\\t\\t\\t_pVk,\\n\\t\\t\\t\\t\\tIC21x,\\n\\t\\t\\t\\t\\tIC21y,\\n\\t\\t\\t\\t\\tcalldataload(add(pubSignals, 640))\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tg1_mulAccC(\\n\\t\\t\\t\\t\\t_pVk,\\n\\t\\t\\t\\t\\tIC22x,\\n\\t\\t\\t\\t\\tIC22y,\\n\\t\\t\\t\\t\\tcalldataload(add(pubSignals, 672))\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tg1_mulAccC(\\n\\t\\t\\t\\t\\t_pVk,\\n\\t\\t\\t\\t\\tIC23x,\\n\\t\\t\\t\\t\\tIC23y,\\n\\t\\t\\t\\t\\tcalldataload(add(pubSignals, 704))\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tg1_mulAccC(\\n\\t\\t\\t\\t\\t_pVk,\\n\\t\\t\\t\\t\\tIC24x,\\n\\t\\t\\t\\t\\tIC24y,\\n\\t\\t\\t\\t\\tcalldataload(add(pubSignals, 736))\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tg1_mulAccC(\\n\\t\\t\\t\\t\\t_pVk,\\n\\t\\t\\t\\t\\tIC25x,\\n\\t\\t\\t\\t\\tIC25y,\\n\\t\\t\\t\\t\\tcalldataload(add(pubSignals, 768))\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tg1_mulAccC(\\n\\t\\t\\t\\t\\t_pVk,\\n\\t\\t\\t\\t\\tIC26x,\\n\\t\\t\\t\\t\\tIC26y,\\n\\t\\t\\t\\t\\tcalldataload(add(pubSignals, 800))\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tg1_mulAccC(\\n\\t\\t\\t\\t\\t_pVk,\\n\\t\\t\\t\\t\\tIC27x,\\n\\t\\t\\t\\t\\tIC27y,\\n\\t\\t\\t\\t\\tcalldataload(add(pubSignals, 832))\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tg1_mulAccC(\\n\\t\\t\\t\\t\\t_pVk,\\n\\t\\t\\t\\t\\tIC28x,\\n\\t\\t\\t\\t\\tIC28y,\\n\\t\\t\\t\\t\\tcalldataload(add(pubSignals, 864))\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tg1_mulAccC(\\n\\t\\t\\t\\t\\t_pVk,\\n\\t\\t\\t\\t\\tIC29x,\\n\\t\\t\\t\\t\\tIC29y,\\n\\t\\t\\t\\t\\tcalldataload(add(pubSignals, 896))\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tg1_mulAccC(\\n\\t\\t\\t\\t\\t_pVk,\\n\\t\\t\\t\\t\\tIC30x,\\n\\t\\t\\t\\t\\tIC30y,\\n\\t\\t\\t\\t\\tcalldataload(add(pubSignals, 928))\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tg1_mulAccC(\\n\\t\\t\\t\\t\\t_pVk,\\n\\t\\t\\t\\t\\tIC31x,\\n\\t\\t\\t\\t\\tIC31y,\\n\\t\\t\\t\\t\\tcalldataload(add(pubSignals, 960))\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tg1_mulAccC(\\n\\t\\t\\t\\t\\t_pVk,\\n\\t\\t\\t\\t\\tIC32x,\\n\\t\\t\\t\\t\\tIC32y,\\n\\t\\t\\t\\t\\tcalldataload(add(pubSignals, 992))\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tg1_mulAccC(\\n\\t\\t\\t\\t\\t_pVk,\\n\\t\\t\\t\\t\\tIC33x,\\n\\t\\t\\t\\t\\tIC33y,\\n\\t\\t\\t\\t\\tcalldataload(add(pubSignals, 1024))\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tg1_mulAccC(\\n\\t\\t\\t\\t\\t_pVk,\\n\\t\\t\\t\\t\\tIC34x,\\n\\t\\t\\t\\t\\tIC34y,\\n\\t\\t\\t\\t\\tcalldataload(add(pubSignals, 1056))\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tg1_mulAccC(\\n\\t\\t\\t\\t\\t_pVk,\\n\\t\\t\\t\\t\\tIC35x,\\n\\t\\t\\t\\t\\tIC35y,\\n\\t\\t\\t\\t\\tcalldataload(add(pubSignals, 1088))\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tg1_mulAccC(\\n\\t\\t\\t\\t\\t_pVk,\\n\\t\\t\\t\\t\\tIC36x,\\n\\t\\t\\t\\t\\tIC36y,\\n\\t\\t\\t\\t\\tcalldataload(add(pubSignals, 1120))\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tg1_mulAccC(\\n\\t\\t\\t\\t\\t_pVk,\\n\\t\\t\\t\\t\\tIC37x,\\n\\t\\t\\t\\t\\tIC37y,\\n\\t\\t\\t\\t\\tcalldataload(add(pubSignals, 1152))\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tg1_mulAccC(\\n\\t\\t\\t\\t\\t_pVk,\\n\\t\\t\\t\\t\\tIC38x,\\n\\t\\t\\t\\t\\tIC38y,\\n\\t\\t\\t\\t\\tcalldataload(add(pubSignals, 1184))\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\t// -A\\n\\t\\t\\t\\tmstore(_pPairing, calldataload(pA))\\n\\t\\t\\t\\tmstore(\\n\\t\\t\\t\\t\\tadd(_pPairing, 32),\\n\\t\\t\\t\\t\\tmod(sub(q, calldataload(add(pA, 32))), q)\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\t// B\\n\\t\\t\\t\\tmstore(add(_pPairing, 64), calldataload(pB))\\n\\t\\t\\t\\tmstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n\\t\\t\\t\\tmstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n\\t\\t\\t\\tmstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n\\t\\t\\t\\t// alpha1\\n\\t\\t\\t\\tmstore(add(_pPairing, 192), alphax)\\n\\t\\t\\t\\tmstore(add(_pPairing, 224), alphay)\\n\\n\\t\\t\\t\\t// beta2\\n\\t\\t\\t\\tmstore(add(_pPairing, 256), betax1)\\n\\t\\t\\t\\tmstore(add(_pPairing, 288), betax2)\\n\\t\\t\\t\\tmstore(add(_pPairing, 320), betay1)\\n\\t\\t\\t\\tmstore(add(_pPairing, 352), betay2)\\n\\n\\t\\t\\t\\t// vk_x\\n\\t\\t\\t\\tmstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n\\t\\t\\t\\tmstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n\\t\\t\\t\\t// gamma2\\n\\t\\t\\t\\tmstore(add(_pPairing, 448), gammax1)\\n\\t\\t\\t\\tmstore(add(_pPairing, 480), gammax2)\\n\\t\\t\\t\\tmstore(add(_pPairing, 512), gammay1)\\n\\t\\t\\t\\tmstore(add(_pPairing, 544), gammay2)\\n\\n\\t\\t\\t\\t// C\\n\\t\\t\\t\\tmstore(add(_pPairing, 576), calldataload(pC))\\n\\t\\t\\t\\tmstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n\\t\\t\\t\\t// delta2\\n\\t\\t\\t\\tmstore(add(_pPairing, 640), deltax1)\\n\\t\\t\\t\\tmstore(add(_pPairing, 672), deltax2)\\n\\t\\t\\t\\tmstore(add(_pPairing, 704), deltay1)\\n\\t\\t\\t\\tmstore(add(_pPairing, 736), deltay2)\\n\\n\\t\\t\\t\\tlet success := staticcall(\\n\\t\\t\\t\\t\\tsub(gas(), 2000),\\n\\t\\t\\t\\t\\t8,\\n\\t\\t\\t\\t\\t_pPairing,\\n\\t\\t\\t\\t\\t768,\\n\\t\\t\\t\\t\\t_pPairing,\\n\\t\\t\\t\\t\\t0x20\\n\\t\\t\\t\\t)\\n\\n\\t\\t\\t\\tisOk := and(success, mload(_pPairing))\\n\\t\\t\\t}\\n\\n\\t\\t\\tlet pMem := mload(0x40)\\n\\t\\t\\tmstore(0x40, add(pMem, pLastMem))\\n\\n\\t\\t\\t// Validate that all evaluations \\u2208 F\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 0)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 32)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 64)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 96)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 128)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 160)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 192)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 224)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 256)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 288)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 320)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 352)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 384)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 416)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 448)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 480)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 512)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 544)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 576)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 608)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 640)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 672)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 704)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 736)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 768)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 800)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 832)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 864)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 896)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 928)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 960)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 992)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 1024)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 1056)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 1088)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 1120)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 1152)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 1184)))\\n\\n\\t\\t\\tcheckField(calldataload(add(_pubSignals, 1216)))\\n\\n\\t\\t\\t// Validate all evaluations\\n\\t\\t\\tlet isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n\\t\\t\\tmstore(0, isValid)\\n\\t\\t\\treturn(0, 0x20)\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x83625f3a594b3483b5bca32c1b53f334c0776eb9cb9c4e3a9fff1769693fc858\",\"license\":\"GPL-3.0\"},\"contracts/structs/PortalKeyVerifiers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nlibrary PortalKeyVerifiers {\\n    struct KeyVerifier {\\n        bytes32 portalEncryptionKeyVerifier;\\n        bytes32 portalDecryptionKeyVerifier;\\n        bytes32 memberEncryptionKeyVerifier;\\n        bytes32 memberDecryptionKeyVerifier;\\n    }\\n}\\n\",\"keccak256\":\"0x1e4b648d85454643a99b08ce334b38ddfdf7ba6e9d3ca605a5bb109f9eee6d76\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x600180546001600160a01b0319167331470b3126dd7cee5ee7591c2cb5142a68f5712017815560c06040526f53edb3e7673341e0a9be488877c5c57260a09081526200004f9160029190620001a6565b50604080518082019091527f1ebfb986fbac5113f8e2c72286fe9362f8e7d211dbc68227a468d7b919e7500381527f10ec38f11baacad5535525bbe8e343074a483c051aa1616266f3b1df3fb7d2046020820152620000b3906003906002620001f4565b50348015620000c157600080fd5b50600080546001600160a01b0319163017815560408051608081018252828152602080820184905281830184905260608083018590528351908101909352602e808452919392919062004e6490830139604080518082018252600a81526964756d6d7976616c756560b01b6020820152600054600154925193945090928492849283926001600160a01b0391821692909116908890620001619062000225565b620001729695949392919062000292565b604051809103906000f0801580156200018f573d6000803e3d6000fd5b506001600160a01b0316608052506200031f915050565b8260018101928215620001e2579160200282015b82811115620001e257825182906001600160801b0316905591602001919060010190620001ba565b50620001f092915062000233565b5090565b8260028101928215620001e2579160200282015b82811115620001e257825182559160200191906001019062000208565b612f6e8062001ef683390190565b5b80821115620001f0576000815560010162000234565b6000815180845260005b81811015620002725760208185018101518683018201520162000254565b506000602082860101526020601f19601f83011685010191505092915050565b6000610120808352620002a88184018a6200024a565b90508281036020840152620002be81896200024a565b90508281036040840152620002d481886200024a565b6001600160a01b039687166060858101919091529590961660808401525050815160a0820152602082015160c0820152604082015160e0820152910151610100909101529392505050565b608051611bad62000349600039600081816101cb015281816102ad015261177a0152611bad6000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063831e4ae011610066578063831e4ae0146101805780638da5cb5b14610193578063a9ec656a146101a6578063b72d092a146101c6578063db974b12146101ed57600080fd5b806306fdde03146100a3578063183aaa39146100ee578063216731511461010e5780636af8c4e7146101325780637da0a87714610155575b600080fd5b6100d86040518060400160405280601681526020017510dbdb5b5d5b9a5d1e4813dddb995908141bdc9d185b60521b81525081565b6040516100e591906117fd565b60405180910390f35b6101016100fc36600461184b565b610202565b6040516100e591906118d8565b61012461011c36600461184b565b6104a0015190565b6040519081526020016100e5565b610145610140366004611938565b61028b565b60405190151581526020016100e5565b600154610168906001600160a01b031681565b6040516001600160a01b0390911681526020016100e5565b61014561018e36600461196b565b610320565b600054610168906001600160a01b031681565b6101b96101b436600461184b565b61152c565b6040516100e591906119d1565b6101687f000000000000000000000000000000000000000000000000000000000000000081565b6102006101fb366004611a02565b611554565b005b604080516001808252818301909252606091600091906020808301908036833701905050905060005b6001811015610284578361024082600f611a56565b6026811061025057610250611a69565b602002015182828151811061026757610267611a69565b60209081029190910101528061027c81611a7f565b91505061022b565b5092915050565b604051636af8c4e760e01b81526001600160a01b0382811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690636af8c4e790602401602060405180830381865afa1580156102f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031a9190611a98565b92915050565b60006112ee565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478110610358576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa91508161038e576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa915050806103bf576000805260206000f35b5050505050565b7f0f9006886f6f20ff507615a18b97e3c01a4014043c38b27cde5a7cdf7dab0d7f85527f1e92b1b255ac9824dd1ee75e42c910e057e6dd572de9aad0494189943d373eb160208601526000608086018661046387357f2cb53751205cf78a9cf5e100f215c610367178554c581286e82ce6894d769ee17f08c033375f7b9b4d4d21ab61cf95398b85ceab592496fac5e0278c847e6742768461035b565b6104b360208801357f052490713e636a97e1fb031b2d3384c4ab2d6f6ed3ac9f459fac2d2ba4a1b2e07f01fd7cd23534b84d17783c31e441aa2eb95a050b9127e37a9f5587a1751f71eb8461035b565b61050360408801357f256616621649a845cb66babd1f676ba44d689e683eb7eb53374e48b8e4c409b17f0b228257ad0859000e38bdf38ff787e6b829b3cd0040ab92164d6171f3b085ea8461035b565b61055360608801357f186e961f4c05f1671f7994e4500382eefc07ea1ddc6a5a1a60f6ee347c7be0577f2979d724649fc184f1091abdedb64ea58401b0c0e54e9480a1c2ef5601c087e08461035b565b6105a360808801357f27081b7a953c3790bf751674a50a23821e7f3841d7b0418e61b5277d6aaa7ccc7f1fd8ffd81e555806ffdc9e0f034c1373ae012499e7e67d5edc01582790d409938461035b565b6105f360a08801357f0e82363237a4dc55526e001eb1d695c3e9039986e9a2373455ba4b570acc72647f13498910321d23ea90b409e45e90c40e837c70eeffd5ca85a02eccbceade6b538461035b565b61064360c08801357f2e2315c45313e02591ba43319399b74bedd9ced2793f602f6b22eafe003f8b4a7f203a8f7d111ad941e485f2692c256680b752edc3cd8ccd92e620cf17ff3534d28461035b565b61069360e08801357f1e86fb929660fdaa69f10be5714651ed0de3dfd49f06238334f937d9d3e2733f7f21564b1e9db2b247e0921254e9f0f75e3fcbe2d1d30a202b2be65e4b18a152e08461035b565b6106e46101008801357f016ec5dcb66e609a8d89e711444d32e586f662354e41084e2888ebb97f5b67227f1a71bfa4c37985b56863021a5c26e1a561cdd4cfa2f1aa9327f632b4670f52428461035b565b6107356101208801357f1831182339eb45624402af0e2887a9a93b33abc52c8d50096aca373449396cd67f15e1f2d6b38cae9960aceae8d832067aac43565737b79c4875b6dd7a67d4bfc98461035b565b6107866101408801357f05dd559259952daad5ad52f86970c2fa050974d317cc2ad04dd58f59ecbc7e787f3020cdde5eb7df9c7afd526edb333a11dcdb1f271e3e7d31dac1ad0ddc7b75538461035b565b6107d76101608801357f1f63433f4731866908a7fdd84e9a6a9cc5584c8e9a6c9541183c17e018660f017f176401669c60e015427c97b4f4e756e9b12a249fbc767240a1b95b6e90339af88461035b565b6108286101808801357f1becf90ef08f14887607386cf5c4ae46eac76cc93f9b28e3dc6720f2a8636f727f266d92bb0c7cf54c13320ec43b304aae7c1e68ab8c633f6bc079beca7b83b8a88461035b565b6108796101a08801357f0f16bca08d7672c2c6a70b097f780d92cb6abe71231530ab38be47ec4bb9f0657f1ecef5129f49f6c4f70856db2437c3342d840ef55e7f674431b39235bb32a2e58461035b565b6108ca6101c08801357f0e57ec4267b4df8c79888d886080dddd7330233a9ea5489dbe03a388741adc657f0f8bf7735da92118f10b840163fc142a2f8c35c5daf732d0375f30ec021c38228461035b565b61091a6101e08801357f25d3c509d8f46e27ef324e20dad1befe8f5ef4c5698065d8b2ec025b80a4bdb97e128ae85c76fbc1214b05cc94acb1a72e3f1fc009250a9a7c3eb907e1aaab4a8461035b565b61096b6102008801357f27529cf8c93cd529763ffa29d7b1b0bb845b2e4ee836bfa6fdc2a3f295a2a2a47f0b61bd21284bfb3849df98447bba37fd83979043923df5a5a1e2313f6c934fe78461035b565b6109bc6102208801357f1d0690e56fd4ebdbeddc2c36d146a581f1bada3459fc0d22e6cf3a879d8e0bb27f2a4c8d4ce173db6c3151ff95771e5bc600454ba8d8e77d73d691d3b788f1547c8461035b565b610a0d6102408801357f2197d9057bcd8512d8bd10d708f9b9b983e30aa4206d0d298b1bfdb22c03af0d7f1f91c262234db447c7a42e2ac865dfc25173698c81f7150c1fc6e3f5215251748461035b565b610a5e6102608801357f0ccf58b5f8b38c4fb71107eb3141fd4cd8835c1ac98ce069d17f483fda4902137f160261b562bb1c2e1adfbe16213ab10f1d65a9af797ff9fdf33cbaffdd8ff14a8461035b565b610aaf6102808801357f06070cd76564f60c5cd3189dfd49e1aed642613d7d2361e1a8e522fa39e2139b7f06d6cb60a85a184ed8560777b4d6ea19d81cb7a5c1f2dc6a485edc4ceb40a2608461035b565b610b006102a08801357f2fc55313fc9e16e0dda7103536e846ee999347ed86ad019229f031a19ed4634c7f0baae891783d92c0d64d955d136cbcebb2e38ae09dbfde150feee3c0b882a8658461035b565b610b516102c08801357f1d7c06c0d99ac359b5ef4753b1bf87d1a8fcffe2ce8cc05e92f39f1d027f43a47f065f3215077f26963b7171c9ff320db50fde64fb3dd2992595c11981b0bda98b8461035b565b610ba26102e08801357f06fead1c35303d414ab4af9fda1e1fd929ef117d2cb5da0efc04f42bc9c6f0bb7f2484e7bd73447c5f7ce18f9df35f68977544ba54ba13a30555bbc0c11a8a427a8461035b565b610bf36103008801357f1a2f48b9b4d7d54e7533ecce0c24385e6a2a65a9f073da49b169aa83444a2c787f2f68633a8f3f177d4be86b9e27b768b50cce1a9e304d44055081d1cf878c922d8461035b565b610c446103208801357f2a74eb84308bc8b3e745cb7869a3301e4f7c6376639d186606ff9a27bad8cbd07f13ec3d5bd56285ef6ad6950716731c0347193d8cadd2b24f33b0bc49ea8b00278461035b565b610c956103408801357f04a3a7a4b18f2e65b78613d067c00fc8e083e60aa927d230047343e15570c1647f1b27af4b6e4052e4c2820aa710903fc054cc14f34e5515d98f9db79108e7197e8461035b565b610ce66103608801357f0a6a46ce4ff2fd7ec6b6bff4233f44cac59f12e27b2964aa4804a67b9cc179347f0466b278eb0e5e3a1117c981ee45eaa3fc9b99a65422bafc1ab3b2d35b25cb178461035b565b610d376103808801357f2a0a97c04405a1f7fef7a27e4055bffc61bfa9213790043f44a58c97808466cd7f2d02b829f9fcf0d926ff84f19acd70edd1e3cebcb3d8992d08bb9abf65cc0b5a8461035b565b610d886103a08801357f199dc24b47a01774b2ca14c6ebb1d6dbefd68f2910cea07a6f52a39a51e821b37f2e2acca1c520dbc0c6669c66d83c51d43ff7623e6e47e8b682b4b53c27fbee548461035b565b610dd96103c08801357f10d9be99903ae31c2e662af507aeac7734dea024cdfca7d206aa20a47b893e707f15d021f30dff2805c0c2699359e2c1e1fd31ccaf156d2d38bbc1e1e2b42d91f18461035b565b610e2a6103e08801357f182f3ab3a4ff98f3885bd016f76eeec476ba1b76c323b1653ef6b80768a5a16b7f1f03120f3f56b9035896158416bc21b1b55938ca68811e0713ab85d2feee2b3e8461035b565b610e7b6104008801357f0f86d0b5c22dce1b3919696027d8a6e866726b44893e19cf1384544d66758f6b7f1218fcad9b211671bc8484d52d665df07d2a87fdce5e2df8c05c643a627a53218461035b565b610ecc6104208801357f29feae1b5b40d3a967d3696b9503cececda9980a7a0b51e3386778862673abd67f19abd3b165a28e010c686149f039ea919508d9373aca3096fe6fee3e63717a6e8461035b565b610f1c6104408801357f2c3c0a78a37f4cd21f164ffd0133f5d4cb2c0ad3ca4ce260a04930dac48cc5207e7169c644575f01b354a6f7633c7be48066117f6add439b6f745525017ac9c58461035b565b610f6c6104608801357f0b793cba68e2710afcdb131342860cea217a60ab74f3f49bcf10bbf9ad78533b7eb9e02b1890acc5f73ac202170eeb3d99ab5d849179db2a443e20d5d71cfeb08461035b565b610fbd6104808801357f06f371ff234dbbe385a7b198ec02fe2c3114696d09a9baacb27c91f2bedd20ae7f0d4adb8a04cae83cb1cd6867a50b8bb4e6f506b4f76de88d66188a2caeee25fb8461035b565b61100e6104a08801357f2274d3006c7891d6ffa5005462d890c9a3f06c2740684f17d98f4fc749dc04de7f0e38eb2cc3fd05d81d7991331e43a9cb3a39825b841d3abe9fbba1d5026944548461035b565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208201527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408201527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8610160820152600087015161018082015260206000018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f0a99859aa8393a5eca66946b5015eaa847991f8bc375aa6cf49fa75656c614a66102808201527f040455d90d2400b3bccf9ce7dcf376258d8a89bfef69a359795ee559e971cb436102a08201527f0aa97e6e93aadcbb21d5b5e193976fc8edea5b4e5400d438ee722ce8b12416bf6102c08201527f1df147cf091a2b6e12bec09ea95cf9d90d8684d8c987b3041b6c08724a262ad26102e08201526020816103008360086107d05a03fa9051169695505050505050565b60405161038081016040526113066000840135610327565b6113136020840135610327565b6113206040840135610327565b61132d6060840135610327565b61133a6080840135610327565b61134760a0840135610327565b61135460c0840135610327565b61136160e0840135610327565b61136f610100840135610327565b61137d610120840135610327565b61138b610140840135610327565b611399610160840135610327565b6113a7610180840135610327565b6113b56101a0840135610327565b6113c36101c0840135610327565b6113d16101e0840135610327565b6113df610200840135610327565b6113ed610220840135610327565b6113fb610240840135610327565b611409610260840135610327565b611417610280840135610327565b6114256102a0840135610327565b6114336102c0840135610327565b6114416102e0840135610327565b61144f610300840135610327565b61145d610320840135610327565b61146b610340840135610327565b611479610360840135610327565b611487610380840135610327565b6114956103a0840135610327565b6114a36103c0840135610327565b6114b16103e0840135610327565b6114bf610400840135610327565b6114cd610420840135610327565b6114db610440840135610327565b6114e9610460840135610327565b6114f7610480840135610327565b6115056104a0840135610327565b6115136104c0840135610327565b611520818486888a6103c6565b90508060005260206000f35b6115346117df565b61153c6117df565b6101a083015181526101c09092015160208301525090565b60408051630418f25760e51b81528391309163831e4ae09161158891859182019060c0830190610100840190600401611aba565b602060405180830381865afa1580156115a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c99190611a98565b61160a5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210383937b7b360991b60448201526064015b60405180910390fd5b604080516104c08181019092529061010085019060269083908390808284376000920182905250915061163e905082610202565b905060026040516020016116529190611b07565b60405160208183030381529060405280519060200120816040516020016116799190611b41565b60405160208183030381529060405280519060200120146116d05760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964206576656e742069647360781b6044820152606401611601565b604080516104c08181019092529061010087019060269083908390808284376000920182905250915061170490508261152c565b600354815191925014801561171e57506004546020820151145b61175b5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039b4b3b732b960911b6044820152606401611601565b60405163666df35360e11b81526001600160a01b0387811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ccdbe6a690602401600060405180830381600087803b1580156117be57600080fd5b505af11580156117d2573d6000803e3d6000fd5b5050505050505050505050565b60405180604001604052806002906020820280368337509192915050565b600060208083528351808285015260005b8181101561182a5785810183015185820160400152820161180e565b506000604082860101526040601f19601f8301168501019250505092915050565b60006104c080838503121561185f57600080fd5b83601f84011261186e57600080fd5b60405181810181811067ffffffffffffffff8211171561189e57634e487b7160e01b600052604160045260246000fd5b6040529083019080858311156118b357600080fd5b845b838110156118cd5780358252602091820191016118b5565b509095945050505050565b6020808252825182820181905260009190848201906040850190845b81811015611910578351835292840192918401916001016118f4565b50909695505050505050565b80356001600160a01b038116811461193357600080fd5b919050565b60006020828403121561194a57600080fd5b6119538261191c565b9392505050565b806040810183101561031a57600080fd5b6000806000806105c080868803121561198357600080fd5b61198d878761195a565b945060c08601878111156119a057600080fd5b6040870194506119b0888261195a565b9350508681870111156119c257600080fd5b50929591945092610100019150565b60408101818360005b60028110156119f95781518352602092830192909101906001016119da565b50505092915050565b6000808284036105e0811215611a1757600080fd5b6105c080821215611a2757600080fd5b849350611a3581860161191c565b925050509250929050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561031a5761031a611a40565b634e487b7160e01b600052603260045260246000fd5b600060018201611a9157611a91611a40565b5060010190565b600060208284031215611aaa57600080fd5b8151801515811461195357600080fd5b6105c081016040808784378083018660005b6002811015611ae957838284379183019190830190600101611acc565b505050808560c0850137506104c08361010084013795945050505050565b60008183825b6001808210611b1c5750611b32565b8254845260209093019290910190600101611b0d565b50505060208201905092915050565b815160009082906020808601845b83811015611b6b57815185529382019390820190600101611b4f565b5092969550505050505056fea2646970667358221220e62eb8e45a310ac0bcead03ab6f379d890a8fcb18b90bb3b0640be9f24f1d8a264736f6c6343000811003360a06040523480156200001157600080fd5b5060405162002f6e38038062002f6e83398101604081905262000034916200080d565b6001600160a01b038216608052620000556200004f6200017e565b6200019a565b6001600160a01b038316620000995760405162461bcd60e51b8152602060048201526005602482015264465632313160d81b60448201526064015b60405180910390fd5b6001600160a01b038216620000d95760405162461bcd60e51b8152602060048201526005602482015264465632313160d81b604482015260640162000090565b6002620000e787826200099e565b50620000f3836200019a565b620001376001600081905260036020527fa15bc60c955c405d20d9149c709e2460f1c2d9a497496a7f46004d1772c3054c80546001600160a01b0319169091179055565b6200014283620001c4565b6200014f838686620002fd565b80516020820151604083015160608401516200016e84848484620005ed565b5050505050505050505062000ab8565b6000620001956200065460201b620013f51760201c565b905090565b600180546001600160a01b0319169055620001c1816200069b602090811b6200144717901c565b50565b6001600160a01b03811615801590620001e757506001600160a01b038116600114155b8015620001fd57506001600160a01b0381163014155b620002335760405162461bcd60e51b8152602060048201526005602482015264465632303360d81b604482015260640162000090565b6001600160a01b038181166000908152600360205260409020541615620002855760405162461bcd60e51b815260206004820152600560248201526411958c8c0d60da1b604482015260640162000090565b60036020527fa15bc60c955c405d20d9149c709e2460f1c2d9a497496a7f46004d1772c3054c80546001600160a01b038381166000818152604081208054939094166001600160a01b0319938416179093556001835283549091161790915560048054909190620002f69062000a80565b9091555050565b8151600003620003385760405162461bcd60e51b8152602060048201526005602482015264465632303160d81b604482015260640162000090565b8051600003620003735760405162461bcd60e51b8152602060048201526005602482015264465632303160d81b604482015260640162000090565b6001600160a01b0383166000908152600860205260408082208151808301909252805482908290620003a5906200090f565b80601f0160208091040260200160405190810160405280929190818152602001828054620003d3906200090f565b8015620004245780601f10620003f85761010080835404028352916020019162000424565b820191906000526020600020905b8154815290600101906020018083116200040657829003601f168201915b505050505081526020016001820180546200043f906200090f565b80601f01602080910402602001604051908101604052809291908181526020018280546200046d906200090f565b8015620004be5780601f106200049257610100808354040283529160200191620004be565b820191906000526020600020905b815481529060010190602001808311620004a057829003601f168201915b5050509190925250508151519192505015620005055760405162461bcd60e51b8152602060048201526005602482015264465632303960d81b604482015260640162000090565b60208101515115620005425760405162461bcd60e51b8152602060048201526005602482015264465632303960d81b604482015260640162000090565b60408051808201825284815260208082018590526001600160a01b0387166000908152600890915291909120815181906200057e90826200099e565b50602082015160018201906200059590826200099e565b50905050600160096000828254620005ae919062000a9c565b90915550506040516001600160a01b038516907f402d924b9bd03718220c51647be3ad8f7da00914b8aba403753caa37f4944a0290600090a250505050565b600680546040805160808101825287815260208082018881528284018881526060840188815260008781526007909452948320935184559051600184015551600283015591516003909101558254919291620006499062000a80565b909155505050505050565b6080516000906001600160a01b03163314801562000673575060143610155b1562000686575060131936013560601c90565b62000195620006eb60201b620014971760201c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b3390565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b03811182821017156200072a576200072a620006ef565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200075b576200075b620006ef565b604052919050565b600082601f8301126200077557600080fd5b81516001600160401b03811115620007915762000791620006ef565b6020620007a7601f8301601f1916820162000730565b8281528582848701011115620007bc57600080fd5b60005b83811015620007dc578581018301518282018401528201620007bf565b506000928101909101919091529392505050565b80516001600160a01b03811681146200080857600080fd5b919050565b6000806000806000808688036101208112156200082957600080fd5b87516001600160401b03808211156200084157600080fd5b6200084f8b838c0162000763565b985060208a01519150808211156200086657600080fd5b620008748b838c0162000763565b975060408a01519150808211156200088b57600080fd5b506200089a8a828b0162000763565b955050620008ab60608901620007f0565b9350620008bb60808901620007f0565b92506080609f1982011215620008d057600080fd5b50620008db62000705565b60a0880151815260c0880151602082015260e088015160408201526101008801516060820152809150509295509295509295565b600181811c908216806200092457607f821691505b6020821081036200094557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200099957600081815260208120601f850160051c81016020861015620009745750805b601f850160051c820191505b81811015620009955782815560010162000980565b5050505b505050565b81516001600160401b03811115620009ba57620009ba620006ef565b620009d281620009cb84546200090f565b846200094b565b602080601f83116001811462000a0a5760008415620009f15750858301515b600019600386901b1c1916600185901b17855562000995565b600085815260208120601f198616915b8281101562000a3b5788860151825594840194600190910190840162000a1a565b508582101562000a5a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b60006001820162000a955762000a9562000a6a565b5060010190565b8082018082111562000ab25762000ab262000a6a565b92915050565b60805161249362000adb600039600081816101e401526113f901526124936000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c8063918b5be1116100c3578063cfd9e0c11161007c578063cfd9e0c114610310578063de72931714610323578063e30c39781461032b578063f2fde38b1461033c578063f4c714b41461034f578063ffad0fc61461037357600080fd5b8063918b5be1146102b257806393ce2036146102c5578063a2425927146102da578063b4d266bc146102e2578063bab50cc9146102f5578063ccdbe6a6146102fd57600080fd5b806366cc227d1161011557806366cc227d146102375780636af8c4e714610249578063715018a61461025c57806379ba509714610264578063876dbec41461026c5780638da5cb5b1461028d57600080fd5b80632df1742a146101525780633bf1bdad146101ac57806353689f33146101c1578063572b6c05146101d45780635eb1cf8f14610224575b600080fd5b610187610160366004611c48565b60076020526000908152604090208054600182015460028301546003909301549192909184565b6040805194855260208501939093529183015260608201526080015b60405180910390f35b6101bf6101ba366004611cbe565b610388565b005b6101bf6101cf366004611d72565b61064e565b6102146101e2366004611dbb565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b60405190151581526020016101a3565b6101bf610232366004611ddd565b6106b0565b6009545b6040519081526020016101a3565b610214610257366004611dbb565b610973565b6101bf6109ae565b6101bf6109b8565b61027f61027a366004611dbb565b610a54565b6040516101a3929190611ee0565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016101a3565b6101bf6102c0366004611f24565b610b80565b6102cd610c02565b6040516101a39190611fd5565b60045461023b565b6101bf6102f0366004611fe8565b610c90565b61023b610fac565b6101bf61030b366004611dbb565b610fbc565b6101bf61031e36600461201b565b611017565b6101bf6110a9565b6001546001600160a01b031661029a565b6101bf61034a366004611dbb565b6110c9565b61036261035d366004611c48565b61113a565b6040516101a395949392919061209d565b61037b611304565b6040516101a3919061210a565b61039861039361149b565b6114a5565b60008790036103c25760405162461bcd60e51b81526004016103b990612157565b60405180910390fd5b60008590036103e35760405162461bcd60e51b81526004016103b990612157565b6103ec816114e9565b600282600381111561040057610400612087565b0361044357600083900361043e5760405162461bcd60e51b8152602060048201526005602482015264465632313360d81b60448201526064016103b9565b610479565b82156104795760405162461bcd60e51b815260206004820152600560248201526411958c8c4d60da1b60448201526064016103b9565b600061048460055490565b9050610494600580546001019055565b6040518060a001604052808a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f8b0181900481028201810190925289815291810191908a908a9081908401838280828437600092019190915250505090825250604080516020601f89018190048102820181019092528781529181019190889088908190840183828082843760009201919091525050509082525060200184600381111561056357610563612087565b815260209081018490526000838152600a909152604090208151819061058990826121ff565b506020820151600182019061059e90826121ff565b50604082015160028201906105b390826121ff565b5060608201518160030160006101000a81548160ff021916908360038111156105de576105de612087565b0217905550608082015181600401559050506105f861149b565b6001600160a01b0316817f7c868b0d1657677f41ebc5d6a76e66b11862720a3800b9b0895b9457c181d8d98b8b8b8b8b8b60405161063b969594939291906122e8565b60405180910390a3505050505050505050565b610656611522565b6106628484848461159b565b6040805185815260208101859052908101839052606081018290527faab31fb710d6d5455bc6c4780d47909b9be91efb723613e2f5dd42ae47dd70699060800160405180910390a150505050565b6106bb61039361149b565b60008790036106dc5760405162461bcd60e51b81526004016103b990612157565b60008590036106fd5760405162461bcd60e51b81526004016103b990612157565b610706816114e9565b600282600381111561071a5761071a612087565b0361075d5760008390036107585760405162461bcd60e51b8152602060048201526005602482015264465632313360d81b60448201526064016103b9565b610793565b82156107935760405162461bcd60e51b815260206004820152600560248201526411958c8c4d60da1b60448201526064016103b9565b60055489106107cc5760405162461bcd60e51b8152602060048201526005602482015264465632303760d81b60448201526064016103b9565b6040518060a0016040528089898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f8a0181900481028201810190925288815291810191908990899081908401838280828437600092019190915250505090825250604080516020601f88018190048102820181019092528681529181019190879087908190840183828082843760009201919091525050509082525060200183600381111561089b5761089b612087565b8152602090810183905260008b8152600a90915260409020815181906108c190826121ff565b50602082015160018201906108d690826121ff565b50604082015160028201906108eb90826121ff565b5060608201518160030160006101000a81548160ff0219169083600381111561091657610916612087565b02179055506080820151816004015590505061093061149b565b6001600160a01b0316897f038bf72a38023435f249f01545d426ebccb3348739aab6415949426e9c5b1ca08a8a8a8a8a8a60405161063b969594939291906122e8565b60006001600160a01b0382166001148015906109a857506001600160a01b038281166000908152600360205260409020541615155b92915050565b6109b6611522565b565b60006109c261149b565b9050806001600160a01b03166109e06001546001600160a01b031690565b6001600160a01b031614610a485760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084016103b9565b610a5181611600565b50565b600860205260009081526040902080548190610a6f90612176565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9b90612176565b8015610ae85780601f10610abd57610100808354040283529160200191610ae8565b820191906000526020600020905b815481529060010190602001808311610acb57829003601f168201915b505050505090806001018054610afd90612176565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2990612176565b8015610b765780601f10610b4b57610100808354040283529160200191610b76565b820191906000526020600020905b815481529060010190602001808311610b5957829003601f168201915b5050505050905082565b610b88611522565b8051600003610ba95760405162461bcd60e51b81526004016103b990612157565b6002610bb582826121ff565b50610bbe61149b565b6001600160a01b03167ff7e4f835d77656f8760a2c1a3e841fd8a50759e50c615130349625666a46acd56002604051610bf79190612331565b60405180910390a250565b60028054610c0f90612176565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3b90612176565b8015610c885780601f10610c5d57610100808354040283529160200191610c88565b820191906000526020600020905b815481529060010190602001808311610c6b57829003601f168201915b505050505081565b610c98611522565b6001600454610ca791906123d2565b600003610cde5760405162461bcd60e51b8152602060048201526005602482015264465632303560d81b60448201526064016103b9565b6001600160a01b03811615801590610d0057506001600160a01b038116600114155b8015610d1557506001600160a01b0381163014155b610d495760405162461bcd60e51b8152602060048201526005602482015264465632303360d81b60448201526064016103b9565b6001600160a01b03828116600090815260036020526040902054811690821614610d9d5760405162461bcd60e51b815260206004820152600560248201526411958c8c0d60da1b60448201526064016103b9565b6001600160a01b0381166000908152600860205260408082208151808301909252805482908290610dcd90612176565b80601f0160208091040260200160405190810160405280929190818152602001828054610df990612176565b8015610e465780601f10610e1b57610100808354040283529160200191610e46565b820191906000526020600020905b815481529060010190602001808311610e2957829003601f168201915b50505050508152602001600182018054610e5f90612176565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8b90612176565b8015610ed85780601f10610ead57610100808354040283529160200191610ed8565b820191906000526020600020905b815481529060010190602001808311610ebb57829003601f168201915b505050919092525050506001600160a01b03838116600081815260036020526040808220805489861684529183208054929095166001600160a01b03199283161790945591815282549091169091556004805492935090610f38836123e5565b9091555050805151151580610f5257506000816020015151115b15610f6057610f6082611619565b610f6861149b565b6001600160a01b0316826001600160a01b03167fa3cf1c45ba4d2d0a3d4d7a5fdd2a75b6feec8d0902c676a228fbb2cada34c31860405160405180910390a3505050565b6000610fb760055490565b905090565b610fc4611522565b610fcd81611827565b610fd561149b565b6001600160a01b0316816001600160a01b03167fce61b8b5dd5de3bc40e91f97638290ba020c1f9267272522a018d616f077b16660405160405180910390a350565b61102261039361149b565b600061102c61149b565b90506110a28186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a01819004810282018101909252888152925088915087908190840183828082843760009201919091525061195892505050565b5050505050565b6110b461039361149b565b60006110be61149b565b9050610a5181611619565b6110d1611522565b600180546001600160a01b0383166001600160a01b031990911681179091556111026000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b600a6020526000908152604090208054819061115590612176565b80601f016020809104026020016040519081016040528092919081815260200182805461118190612176565b80156111ce5780601f106111a3576101008083540402835291602001916111ce565b820191906000526020600020905b8154815290600101906020018083116111b157829003601f168201915b5050505050908060010180546111e390612176565b80601f016020809104026020016040519081016040528092919081815260200182805461120f90612176565b801561125c5780601f106112315761010080835404028352916020019161125c565b820191906000526020600020905b81548152906001019060200180831161123f57829003601f168201915b50505050509080600201805461127190612176565b80601f016020809104026020016040519081016040528092919081815260200182805461129d90612176565b80156112ea5780601f106112bf576101008083540402835291602001916112ea565b820191906000526020600020905b8154815290600101906020018083116112cd57829003601f168201915b505050506003830154600490930154919260ff1691905085565b6060600060045467ffffffffffffffff81111561132357611323611f0e565b60405190808252806020026020018201604052801561134c578160200160208202803683370190505b506001600090815260036020527fa15bc60c955c405d20d9149c709e2460f1c2d9a497496a7f46004d1772c3054c54919250906001600160a01b03165b6001600160a01b0381166001146113ed57808383815181106113ad576113ad6123fc565b6001600160a01b039283166020918202929092018101919091529181166000908152600390925260409091205416816113e581612412565b925050611389565b509092915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633148015611430575060143610155b15611442575060131936013560601c90565b503390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b3390565b6000610fb76113f5565b6114ae81610973565b610a515760405162461bcd60e51b815260206004820152600c60248201526b526f6c65204d697373696e6760a01b60448201526064016103b9565b6006548110610a515760405162461bcd60e51b815260206004820152600560248201526408cac6460760db1b60448201526064016103b9565b61152a61149b565b6001600160a01b03166115456000546001600160a01b031690565b6001600160a01b0316146109b65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103b9565b6006805460408051608081018252878152602080820188815282840188815260608401888152600087815260079094529483209351845590516001840155516002830155915160039091015582549192916115f590612412565b909155505050505050565b600180546001600160a01b0319169055610a5181611447565b6001600160a01b038116600090815260086020526040808220815180830190925280548290829061164990612176565b80601f016020809104026020016040519081016040528092919081815260200182805461167590612176565b80156116c25780601f10611697576101008083540402835291602001916116c2565b820191906000526020600020905b8154815290600101906020018083116116a557829003601f168201915b505050505081526020016001820180546116db90612176565b80601f016020809104026020016040519081016040528092919081815260200182805461170790612176565b80156117545780601f1061172957610100808354040283529160200191611754565b820191906000526020600020905b81548152906001019060200180831161173757829003601f168201915b50505050508152505090506000816000015151116117845760405162461bcd60e51b81526004016103b99061242b565b6000816020015151116117a95760405162461bcd60e51b81526004016103b99061242b565b6001600160a01b0382166000908152600860205260408120906117cc8282611bfa565b6117da600183016000611bfa565b50506009600081546117eb906123e5565b909155506040516001600160a01b038316907fe43263e34fd2c5f045a6bb8f67fc65b9bdfd615beb14b6036a76aedf940e187690600090a25050565b6001600160a01b0381161580159061184957506001600160a01b038116600114155b801561185e57506001600160a01b0381163014155b6118925760405162461bcd60e51b8152602060048201526005602482015264465632303360d81b60448201526064016103b9565b6001600160a01b0381811660009081526003602052604090205416156118e25760405162461bcd60e51b815260206004820152600560248201526411958c8c0d60da1b60448201526064016103b9565b60036020527fa15bc60c955c405d20d9149c709e2460f1c2d9a497496a7f46004d1772c3054c80546001600160a01b038381166000818152604081208054939094166001600160a01b031993841617909355600183528354909116179091556004805490919061195190612412565b9091555050565b81516000036119915760405162461bcd60e51b8152602060048201526005602482015264465632303160d81b60448201526064016103b9565b80516000036119ca5760405162461bcd60e51b8152602060048201526005602482015264465632303160d81b60448201526064016103b9565b6001600160a01b03831660009081526008602052604080822081518083019092528054829082906119fa90612176565b80601f0160208091040260200160405190810160405280929190818152602001828054611a2690612176565b8015611a735780601f10611a4857610100808354040283529160200191611a73565b820191906000526020600020905b815481529060010190602001808311611a5657829003601f168201915b50505050508152602001600182018054611a8c90612176565b80601f0160208091040260200160405190810160405280929190818152602001828054611ab890612176565b8015611b055780601f10611ada57610100808354040283529160200191611b05565b820191906000526020600020905b815481529060010190602001808311611ae857829003601f168201915b5050509190925250508151519192505015611b325760405162461bcd60e51b81526004016103b99061242b565b60208101515115611b555760405162461bcd60e51b81526004016103b99061242b565b60408051808201825284815260208082018590526001600160a01b038716600090815260089091529190912081518190611b8f90826121ff565b5060208201516001820190611ba490826121ff565b50905050600160096000828254611bbb919061244a565b90915550506040516001600160a01b038516907f402d924b9bd03718220c51647be3ad8f7da00914b8aba403753caa37f4944a0290600090a250505050565b508054611c0690612176565b6000825580601f10611c16575050565b601f016020900490600052602060002090810190610a5191905b80821115611c445760008155600101611c30565b5090565b600060208284031215611c5a57600080fd5b5035919050565b60008083601f840112611c7357600080fd5b50813567ffffffffffffffff811115611c8b57600080fd5b602083019150836020828501011115611ca357600080fd5b9250929050565b803560048110611cb957600080fd5b919050565b60008060008060008060008060a0898b031215611cda57600080fd5b883567ffffffffffffffff80821115611cf257600080fd5b611cfe8c838d01611c61565b909a50985060208b0135915080821115611d1757600080fd5b611d238c838d01611c61565b909850965060408b0135915080821115611d3c57600080fd5b50611d498b828c01611c61565b9095509350611d5c905060608a01611caa565b9150608089013590509295985092959890939650565b60008060008060808587031215611d8857600080fd5b5050823594602084013594506040840135936060013592509050565b80356001600160a01b0381168114611cb957600080fd5b600060208284031215611dcd57600080fd5b611dd682611da4565b9392505050565b600080600080600080600080600060c08a8c031215611dfb57600080fd5b8935985060208a013567ffffffffffffffff80821115611e1a57600080fd5b611e268d838e01611c61565b909a50985060408c0135915080821115611e3f57600080fd5b611e4b8d838e01611c61565b909850965060608c0135915080821115611e6457600080fd5b50611e718c828d01611c61565b9095509350611e84905060808b01611caa565b915060a08a013590509295985092959850929598565b6000815180845260005b81811015611ec057602081850181015186830182015201611ea4565b506000602082860101526020601f19601f83011685010191505092915050565b604081526000611ef36040830185611e9a565b8281036020840152611f058185611e9a565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215611f3657600080fd5b813567ffffffffffffffff80821115611f4e57600080fd5b818401915084601f830112611f6257600080fd5b813581811115611f7457611f74611f0e565b604051601f8201601f19908116603f01168101908382118183101715611f9c57611f9c611f0e565b81604052828152876020848701011115611fb557600080fd5b826020860160208301376000928101602001929092525095945050505050565b602081526000611dd66020830184611e9a565b60008060408385031215611ffb57600080fd5b61200483611da4565b915061201260208401611da4565b90509250929050565b6000806000806040858703121561203157600080fd5b843567ffffffffffffffff8082111561204957600080fd5b61205588838901611c61565b9096509450602087013591508082111561206e57600080fd5b5061207b87828801611c61565b95989497509550505050565b634e487b7160e01b600052602160045260246000fd5b60a0815260006120b060a0830188611e9a565b82810360208401526120c28188611e9a565b905082810360408401526120d68187611e9a565b915050600484106120f757634e487b7160e01b600052602160045260246000fd5b6060820193909352608001529392505050565b6020808252825182820181905260009190848201906040850190845b8181101561214b5783516001600160a01b031683529284019291840191600101612126565b50909695505050505050565b602080825260059082015264232b19181b60d91b604082015260600190565b600181811c9082168061218a57607f821691505b6020821081036121aa57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156121fa57600081815260208120601f850160051c810160208610156121d75750805b601f850160051c820191505b818110156121f6578281556001016121e3565b5050505b505050565b815167ffffffffffffffff81111561221957612219611f0e565b61222d816122278454612176565b846121b0565b602080601f831160018114612262576000841561224a5750858301515b600019600386901b1c1916600185901b1785556121f6565b600085815260208120601f198616915b8281101561229157888601518255948401946001909101908401612272565b50858210156122af5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6060815260006122fc60608301888a6122bf565b828103602084015261230f8187896122bf565b905082810360408401526123248185876122bf565b9998505050505050505050565b600060208083526000845461234581612176565b808487015260406001808416600081146123665760018114612380576123ae565b60ff1985168984015283151560051b8901830195506123ae565b896000528660002060005b858110156123a65781548b820186015290830190880161238b565b8a0184019650505b509398975050505050505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156109a8576109a86123bc565b6000816123f4576123f46123bc565b506000190190565b634e487b7160e01b600052603260045260246000fd5b600060018201612424576124246123bc565b5060010190565b602080825260059082015264465632303960d81b604082015260600190565b808201808211156109a8576109a86123bc56fea2646970667358221220d0befa6f7338d8af009a1ce56483b5163f7c83e4bceea4ae85c25c7aa1cc776264736f6c63430008110033516d4e534d335254726868744b38554a4553544a594245577967554856324450656478444a664869567068565642",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063831e4ae011610066578063831e4ae0146101805780638da5cb5b14610193578063a9ec656a146101a6578063b72d092a146101c6578063db974b12146101ed57600080fd5b806306fdde03146100a3578063183aaa39146100ee578063216731511461010e5780636af8c4e7146101325780637da0a87714610155575b600080fd5b6100d86040518060400160405280601681526020017510dbdb5b5d5b9a5d1e4813dddb995908141bdc9d185b60521b81525081565b6040516100e591906117fd565b60405180910390f35b6101016100fc36600461184b565b610202565b6040516100e591906118d8565b61012461011c36600461184b565b6104a0015190565b6040519081526020016100e5565b610145610140366004611938565b61028b565b60405190151581526020016100e5565b600154610168906001600160a01b031681565b6040516001600160a01b0390911681526020016100e5565b61014561018e36600461196b565b610320565b600054610168906001600160a01b031681565b6101b96101b436600461184b565b61152c565b6040516100e591906119d1565b6101687f000000000000000000000000000000000000000000000000000000000000000081565b6102006101fb366004611a02565b611554565b005b604080516001808252818301909252606091600091906020808301908036833701905050905060005b6001811015610284578361024082600f611a56565b6026811061025057610250611a69565b602002015182828151811061026757610267611a69565b60209081029190910101528061027c81611a7f565b91505061022b565b5092915050565b604051636af8c4e760e01b81526001600160a01b0382811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690636af8c4e790602401602060405180830381865afa1580156102f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031a9190611a98565b92915050565b60006112ee565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478110610358576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa91508161038e576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa915050806103bf576000805260206000f35b5050505050565b7f0f9006886f6f20ff507615a18b97e3c01a4014043c38b27cde5a7cdf7dab0d7f85527f1e92b1b255ac9824dd1ee75e42c910e057e6dd572de9aad0494189943d373eb160208601526000608086018661046387357f2cb53751205cf78a9cf5e100f215c610367178554c581286e82ce6894d769ee17f08c033375f7b9b4d4d21ab61cf95398b85ceab592496fac5e0278c847e6742768461035b565b6104b360208801357f052490713e636a97e1fb031b2d3384c4ab2d6f6ed3ac9f459fac2d2ba4a1b2e07f01fd7cd23534b84d17783c31e441aa2eb95a050b9127e37a9f5587a1751f71eb8461035b565b61050360408801357f256616621649a845cb66babd1f676ba44d689e683eb7eb53374e48b8e4c409b17f0b228257ad0859000e38bdf38ff787e6b829b3cd0040ab92164d6171f3b085ea8461035b565b61055360608801357f186e961f4c05f1671f7994e4500382eefc07ea1ddc6a5a1a60f6ee347c7be0577f2979d724649fc184f1091abdedb64ea58401b0c0e54e9480a1c2ef5601c087e08461035b565b6105a360808801357f27081b7a953c3790bf751674a50a23821e7f3841d7b0418e61b5277d6aaa7ccc7f1fd8ffd81e555806ffdc9e0f034c1373ae012499e7e67d5edc01582790d409938461035b565b6105f360a08801357f0e82363237a4dc55526e001eb1d695c3e9039986e9a2373455ba4b570acc72647f13498910321d23ea90b409e45e90c40e837c70eeffd5ca85a02eccbceade6b538461035b565b61064360c08801357f2e2315c45313e02591ba43319399b74bedd9ced2793f602f6b22eafe003f8b4a7f203a8f7d111ad941e485f2692c256680b752edc3cd8ccd92e620cf17ff3534d28461035b565b61069360e08801357f1e86fb929660fdaa69f10be5714651ed0de3dfd49f06238334f937d9d3e2733f7f21564b1e9db2b247e0921254e9f0f75e3fcbe2d1d30a202b2be65e4b18a152e08461035b565b6106e46101008801357f016ec5dcb66e609a8d89e711444d32e586f662354e41084e2888ebb97f5b67227f1a71bfa4c37985b56863021a5c26e1a561cdd4cfa2f1aa9327f632b4670f52428461035b565b6107356101208801357f1831182339eb45624402af0e2887a9a93b33abc52c8d50096aca373449396cd67f15e1f2d6b38cae9960aceae8d832067aac43565737b79c4875b6dd7a67d4bfc98461035b565b6107866101408801357f05dd559259952daad5ad52f86970c2fa050974d317cc2ad04dd58f59ecbc7e787f3020cdde5eb7df9c7afd526edb333a11dcdb1f271e3e7d31dac1ad0ddc7b75538461035b565b6107d76101608801357f1f63433f4731866908a7fdd84e9a6a9cc5584c8e9a6c9541183c17e018660f017f176401669c60e015427c97b4f4e756e9b12a249fbc767240a1b95b6e90339af88461035b565b6108286101808801357f1becf90ef08f14887607386cf5c4ae46eac76cc93f9b28e3dc6720f2a8636f727f266d92bb0c7cf54c13320ec43b304aae7c1e68ab8c633f6bc079beca7b83b8a88461035b565b6108796101a08801357f0f16bca08d7672c2c6a70b097f780d92cb6abe71231530ab38be47ec4bb9f0657f1ecef5129f49f6c4f70856db2437c3342d840ef55e7f674431b39235bb32a2e58461035b565b6108ca6101c08801357f0e57ec4267b4df8c79888d886080dddd7330233a9ea5489dbe03a388741adc657f0f8bf7735da92118f10b840163fc142a2f8c35c5daf732d0375f30ec021c38228461035b565b61091a6101e08801357f25d3c509d8f46e27ef324e20dad1befe8f5ef4c5698065d8b2ec025b80a4bdb97e128ae85c76fbc1214b05cc94acb1a72e3f1fc009250a9a7c3eb907e1aaab4a8461035b565b61096b6102008801357f27529cf8c93cd529763ffa29d7b1b0bb845b2e4ee836bfa6fdc2a3f295a2a2a47f0b61bd21284bfb3849df98447bba37fd83979043923df5a5a1e2313f6c934fe78461035b565b6109bc6102208801357f1d0690e56fd4ebdbeddc2c36d146a581f1bada3459fc0d22e6cf3a879d8e0bb27f2a4c8d4ce173db6c3151ff95771e5bc600454ba8d8e77d73d691d3b788f1547c8461035b565b610a0d6102408801357f2197d9057bcd8512d8bd10d708f9b9b983e30aa4206d0d298b1bfdb22c03af0d7f1f91c262234db447c7a42e2ac865dfc25173698c81f7150c1fc6e3f5215251748461035b565b610a5e6102608801357f0ccf58b5f8b38c4fb71107eb3141fd4cd8835c1ac98ce069d17f483fda4902137f160261b562bb1c2e1adfbe16213ab10f1d65a9af797ff9fdf33cbaffdd8ff14a8461035b565b610aaf6102808801357f06070cd76564f60c5cd3189dfd49e1aed642613d7d2361e1a8e522fa39e2139b7f06d6cb60a85a184ed8560777b4d6ea19d81cb7a5c1f2dc6a485edc4ceb40a2608461035b565b610b006102a08801357f2fc55313fc9e16e0dda7103536e846ee999347ed86ad019229f031a19ed4634c7f0baae891783d92c0d64d955d136cbcebb2e38ae09dbfde150feee3c0b882a8658461035b565b610b516102c08801357f1d7c06c0d99ac359b5ef4753b1bf87d1a8fcffe2ce8cc05e92f39f1d027f43a47f065f3215077f26963b7171c9ff320db50fde64fb3dd2992595c11981b0bda98b8461035b565b610ba26102e08801357f06fead1c35303d414ab4af9fda1e1fd929ef117d2cb5da0efc04f42bc9c6f0bb7f2484e7bd73447c5f7ce18f9df35f68977544ba54ba13a30555bbc0c11a8a427a8461035b565b610bf36103008801357f1a2f48b9b4d7d54e7533ecce0c24385e6a2a65a9f073da49b169aa83444a2c787f2f68633a8f3f177d4be86b9e27b768b50cce1a9e304d44055081d1cf878c922d8461035b565b610c446103208801357f2a74eb84308bc8b3e745cb7869a3301e4f7c6376639d186606ff9a27bad8cbd07f13ec3d5bd56285ef6ad6950716731c0347193d8cadd2b24f33b0bc49ea8b00278461035b565b610c956103408801357f04a3a7a4b18f2e65b78613d067c00fc8e083e60aa927d230047343e15570c1647f1b27af4b6e4052e4c2820aa710903fc054cc14f34e5515d98f9db79108e7197e8461035b565b610ce66103608801357f0a6a46ce4ff2fd7ec6b6bff4233f44cac59f12e27b2964aa4804a67b9cc179347f0466b278eb0e5e3a1117c981ee45eaa3fc9b99a65422bafc1ab3b2d35b25cb178461035b565b610d376103808801357f2a0a97c04405a1f7fef7a27e4055bffc61bfa9213790043f44a58c97808466cd7f2d02b829f9fcf0d926ff84f19acd70edd1e3cebcb3d8992d08bb9abf65cc0b5a8461035b565b610d886103a08801357f199dc24b47a01774b2ca14c6ebb1d6dbefd68f2910cea07a6f52a39a51e821b37f2e2acca1c520dbc0c6669c66d83c51d43ff7623e6e47e8b682b4b53c27fbee548461035b565b610dd96103c08801357f10d9be99903ae31c2e662af507aeac7734dea024cdfca7d206aa20a47b893e707f15d021f30dff2805c0c2699359e2c1e1fd31ccaf156d2d38bbc1e1e2b42d91f18461035b565b610e2a6103e08801357f182f3ab3a4ff98f3885bd016f76eeec476ba1b76c323b1653ef6b80768a5a16b7f1f03120f3f56b9035896158416bc21b1b55938ca68811e0713ab85d2feee2b3e8461035b565b610e7b6104008801357f0f86d0b5c22dce1b3919696027d8a6e866726b44893e19cf1384544d66758f6b7f1218fcad9b211671bc8484d52d665df07d2a87fdce5e2df8c05c643a627a53218461035b565b610ecc6104208801357f29feae1b5b40d3a967d3696b9503cececda9980a7a0b51e3386778862673abd67f19abd3b165a28e010c686149f039ea919508d9373aca3096fe6fee3e63717a6e8461035b565b610f1c6104408801357f2c3c0a78a37f4cd21f164ffd0133f5d4cb2c0ad3ca4ce260a04930dac48cc5207e7169c644575f01b354a6f7633c7be48066117f6add439b6f745525017ac9c58461035b565b610f6c6104608801357f0b793cba68e2710afcdb131342860cea217a60ab74f3f49bcf10bbf9ad78533b7eb9e02b1890acc5f73ac202170eeb3d99ab5d849179db2a443e20d5d71cfeb08461035b565b610fbd6104808801357f06f371ff234dbbe385a7b198ec02fe2c3114696d09a9baacb27c91f2bedd20ae7f0d4adb8a04cae83cb1cd6867a50b8bb4e6f506b4f76de88d66188a2caeee25fb8461035b565b61100e6104a08801357f2274d3006c7891d6ffa5005462d890c9a3f06c2740684f17d98f4fc749dc04de7f0e38eb2cc3fd05d81d7991331e43a9cb3a39825b841d3abe9fbba1d5026944548461035b565b50823581527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208401357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020820152833560408201526020840135606082015260408401356080820152606084013560a08201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208201527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408201527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8610160820152600087015161018082015260206000018701516101a08201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08201527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008201527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220820152843561024082015260208501356102608201527f0a99859aa8393a5eca66946b5015eaa847991f8bc375aa6cf49fa75656c614a66102808201527f040455d90d2400b3bccf9ce7dcf376258d8a89bfef69a359795ee559e971cb436102a08201527f0aa97e6e93aadcbb21d5b5e193976fc8edea5b4e5400d438ee722ce8b12416bf6102c08201527f1df147cf091a2b6e12bec09ea95cf9d90d8684d8c987b3041b6c08724a262ad26102e08201526020816103008360086107d05a03fa9051169695505050505050565b60405161038081016040526113066000840135610327565b6113136020840135610327565b6113206040840135610327565b61132d6060840135610327565b61133a6080840135610327565b61134760a0840135610327565b61135460c0840135610327565b61136160e0840135610327565b61136f610100840135610327565b61137d610120840135610327565b61138b610140840135610327565b611399610160840135610327565b6113a7610180840135610327565b6113b56101a0840135610327565b6113c36101c0840135610327565b6113d16101e0840135610327565b6113df610200840135610327565b6113ed610220840135610327565b6113fb610240840135610327565b611409610260840135610327565b611417610280840135610327565b6114256102a0840135610327565b6114336102c0840135610327565b6114416102e0840135610327565b61144f610300840135610327565b61145d610320840135610327565b61146b610340840135610327565b611479610360840135610327565b611487610380840135610327565b6114956103a0840135610327565b6114a36103c0840135610327565b6114b16103e0840135610327565b6114bf610400840135610327565b6114cd610420840135610327565b6114db610440840135610327565b6114e9610460840135610327565b6114f7610480840135610327565b6115056104a0840135610327565b6115136104c0840135610327565b611520818486888a6103c6565b90508060005260206000f35b6115346117df565b61153c6117df565b6101a083015181526101c09092015160208301525090565b60408051630418f25760e51b81528391309163831e4ae09161158891859182019060c0830190610100840190600401611aba565b602060405180830381865afa1580156115a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c99190611a98565b61160a5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210383937b7b360991b60448201526064015b60405180910390fd5b604080516104c08181019092529061010085019060269083908390808284376000920182905250915061163e905082610202565b905060026040516020016116529190611b07565b60405160208183030381529060405280519060200120816040516020016116799190611b41565b60405160208183030381529060405280519060200120146116d05760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964206576656e742069647360781b6044820152606401611601565b604080516104c08181019092529061010087019060269083908390808284376000920182905250915061170490508261152c565b600354815191925014801561171e57506004546020820151145b61175b5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039b4b3b732b960911b6044820152606401611601565b60405163666df35360e11b81526001600160a01b0387811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ccdbe6a690602401600060405180830381600087803b1580156117be57600080fd5b505af11580156117d2573d6000803e3d6000fd5b5050505050505050505050565b60405180604001604052806002906020820280368337509192915050565b600060208083528351808285015260005b8181101561182a5785810183015185820160400152820161180e565b506000604082860101526040601f19601f8301168501019250505092915050565b60006104c080838503121561185f57600080fd5b83601f84011261186e57600080fd5b60405181810181811067ffffffffffffffff8211171561189e57634e487b7160e01b600052604160045260246000fd5b6040529083019080858311156118b357600080fd5b845b838110156118cd5780358252602091820191016118b5565b509095945050505050565b6020808252825182820181905260009190848201906040850190845b81811015611910578351835292840192918401916001016118f4565b50909695505050505050565b80356001600160a01b038116811461193357600080fd5b919050565b60006020828403121561194a57600080fd5b6119538261191c565b9392505050565b806040810183101561031a57600080fd5b6000806000806105c080868803121561198357600080fd5b61198d878761195a565b945060c08601878111156119a057600080fd5b6040870194506119b0888261195a565b9350508681870111156119c257600080fd5b50929591945092610100019150565b60408101818360005b60028110156119f95781518352602092830192909101906001016119da565b50505092915050565b6000808284036105e0811215611a1757600080fd5b6105c080821215611a2757600080fd5b849350611a3581860161191c565b925050509250929050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561031a5761031a611a40565b634e487b7160e01b600052603260045260246000fd5b600060018201611a9157611a91611a40565b5060010190565b600060208284031215611aaa57600080fd5b8151801515811461195357600080fd5b6105c081016040808784378083018660005b6002811015611ae957838284379183019190830190600101611acc565b505050808560c0850137506104c08361010084013795945050505050565b60008183825b6001808210611b1c5750611b32565b8254845260209093019290910190600101611b0d565b50505060208201905092915050565b815160009082906020808601845b83811015611b6b57815185529382019390820190600101611b4f565b5092969550505050505056fea2646970667358221220e62eb8e45a310ac0bcead03ab6f379d890a8fcb18b90bb3b0640be9f24f1d8a264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 397,
        "contract": "contracts/CommunityPortal.sol:CommunityPortal",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 400,
        "contract": "contracts/CommunityPortal.sol:CommunityPortal",
        "label": "trustedForwarder",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 406,
        "contract": "contracts/CommunityPortal.sol:CommunityPortal",
        "label": "VALID_EVENT_IDS",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)1_storage"
      },
      {
        "astId": 413,
        "contract": "contracts/CommunityPortal.sol:CommunityPortal",
        "label": "ETHBERLIN_SIGNER",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)2_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)1_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[1]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}